hyper_avg
ct = 1
for (dust_date in hyper_na_date){
seoul_dust_by_gu[as.integer(hyper_na_idx[ct]), 3] = hyper_avg$dust_avg[hyper_avg$date == dust_date]
ct = ct + 1
}
hyper_na_date = seoul_dust_by_gu[is.na(seoul_dust_by_gu$초미세먼지.....), ]$측정일시
hyper_na_idx = rownames(seoul_dust_by_gu[is.na(seoul_dust_by_gu$초미세먼지.....), ])
ct = 1
for (dust_date in hyper_na_date){
seoul_dust_by_gu[as.integer(hyper_na_idx[ct]), 3] = hyper_avg$dust_avg[hyper_avg$date == dust_date]
ct = ct + 1
}
sum(is.na(seoul_dust_by_gu))
year_data = read.csv(paste0(path_meta, file), stringsAsFactors = F)
fine_avg = dust_avg(year_data, 7)
hyper_avg = dust_avg(year_data, 8)
seoul_dust_by_gu = year_data %>%
filter(측정소명 %in% measuring_stations) %>%
select(측정일시, 측정소명, 미세먼지....., 초미세먼지.....)
sum(is.na(seoul_dust_by_gu))
dust_na_date = seoul_dust_by_gu[is.na(seoul_dust_by_gu$미세먼지.....), ]$측정일시
dust_na_idx = rownames(seoul_dust_by_gu[is.na(seoul_dust_by_gu$미세먼지.....), ])
ct = 1
for (dust_date in dust_na_date){
seoul_dust_by_gu[as.integer(dust_na_idx[ct]), 3] = fine_avg$dust_avg[fine_avg$date == dust_date]
ct = ct + 1
}
hyper_na_date = seoul_dust_by_gu[is.na(seoul_dust_by_gu$초미세먼지.....), ]$측정일시
hyper_na_idx = rownames(seoul_dust_by_gu[is.na(seoul_dust_by_gu$초미세먼지.....), ])
ct = 1
for (dust_date in hyper_na_date){
seoul_dust_by_gu[as.integer(hyper_na_idx[ct]), 4] = hyper_avg$dust_avg[hyper_avg$date == dust_date]
ct = ct + 1
}
sum(is.na(seoul_dust_by_gu))
year_data
apply(seoul_dust_by_gu[, 3], 1, dust_grade_calculator)
seoul_dust_by_gu[, 3]
seoul_dust_by_gu[, 3]
dust_grade_calculator(100)
apply(seoul_dust_by_gu[, 3], 1, dust_grade_calculator)
dim(seoul_dust_by_gu[, 3])
seoul_dust_by_gu$미세먼지.....
seoul_dust_by_gu[3]
apply(seoul_dust_by_gu[3], 1, dust_grade_calculator)
fine_dust_grade = apply(seoul_dust_by_gu[3], 1, dust_grade_calculator)
hyper_dust_grade = apply(seoul_dust_by_gu[4], 1, hyper_dust_grade_calculator)
IsDusty = function(data){
IsDustyDay = ifelse(data[[1]] > 4 | data[[2]] >4, 1, 0)
return(IsDustyDay)
}
IsDustyDay = apply(cbind(fine_dust_grade, hyper_dust_grade), 1, IsDusty)
IsDustyDay
seoul_dust_by_gu = cbind(seoul_dust_by_gu, fine_dust_grade, hyper_dust_grade, IsDustyDay)
seoul_dust_by_gu
dust_res = NULL
for (file in air_data){
year_data = read.csv(paste0(path_meta, file), stringsAsFactors = F)
fine_avg = dust_avg(year_data, 7)
hyper_avg = dust_avg(year_data, 8)
seoul_dust_by_gu = year_data %>%
filter(측정소명 %in% measuring_stations) %>%
select(측정일시, 측정소명, 미세먼지....., 초미세먼지.....)
dust_na_date = seoul_dust_by_gu[is.na(seoul_dust_by_gu$미세먼지.....), ]$측정일시
dust_na_idx = rownames(seoul_dust_by_gu[is.na(seoul_dust_by_gu$미세먼지.....), ])
ct = 1
for (dust_date in dust_na_date){
seoul_dust_by_gu[as.integer(dust_na_idx[ct]), 3] = fine_avg$dust_avg[fine_avg$date == dust_date]
ct = ct + 1
}
hyper_na_date = seoul_dust_by_gu[is.na(seoul_dust_by_gu$초미세먼지.....), ]$측정일시
hyper_na_idx = rownames(seoul_dust_by_gu[is.na(seoul_dust_by_gu$초미세먼지.....), ])
ct = 1
for (dust_date in hyper_na_date){
seoul_dust_by_gu[as.integer(hyper_na_idx[ct]), 4] = hyper_avg$dust_avg[hyper_avg$date == dust_date]
ct = ct + 1
}
fine_dust_grade = apply(seoul_dust_by_gu[3], 1, dust_grade_calculator)
hyper_dust_grade = apply(seoul_dust_by_gu[4], 1, hyper_dust_grade_calculator)
IsDustyDay = apply(cbind(fine_dust_grade, hyper_dust_grade), 1, IsDusty)
seoul_dust_by_gu = cbind(seoul_dust_by_gu, fine_dust_grade, hyper_dust_grade, IsDustyDay)
dust_res = rbind(dust_res, year_dust)
}
dust_res = NULL
for (file in air_data){
year_data = read.csv(paste0(path_meta, file), stringsAsFactors = F)
fine_avg = dust_avg(year_data, 7)
hyper_avg = dust_avg(year_data, 8)
seoul_dust_by_gu = year_data %>%
filter(측정소명 %in% measuring_stations) %>%
select(측정일시, 측정소명, 미세먼지....., 초미세먼지.....)
dust_na_date = seoul_dust_by_gu[is.na(seoul_dust_by_gu$미세먼지.....), ]$측정일시
dust_na_idx = rownames(seoul_dust_by_gu[is.na(seoul_dust_by_gu$미세먼지.....), ])
ct = 1
for (dust_date in dust_na_date){
seoul_dust_by_gu[as.integer(dust_na_idx[ct]), 3] = fine_avg$dust_avg[fine_avg$date == dust_date]
ct = ct + 1
}
hyper_na_date = seoul_dust_by_gu[is.na(seoul_dust_by_gu$초미세먼지.....), ]$측정일시
hyper_na_idx = rownames(seoul_dust_by_gu[is.na(seoul_dust_by_gu$초미세먼지.....), ])
ct = 1
for (dust_date in hyper_na_date){
seoul_dust_by_gu[as.integer(hyper_na_idx[ct]), 4] = hyper_avg$dust_avg[hyper_avg$date == dust_date]
ct = ct + 1
}
fine_dust_grade = apply(seoul_dust_by_gu[3], 1, dust_grade_calculator)
hyper_dust_grade = apply(seoul_dust_by_gu[4], 1, hyper_dust_grade_calculator)
IsDustyDay = apply(cbind(fine_dust_grade, hyper_dust_grade), 1, IsDusty)
seoul_dust_by_gu = cbind(seoul_dust_by_gu, fine_dust_grade, hyper_dust_grade, IsDustyDay)
dust_res = rbind(dust_res, seoul_dust_by_gu)
}
View(dust_res)
# load weather data
weather_data = c("weather_2017.csv", "weather_2018.csv", "weather_2019.csv")
weather_res = NULL
for (file in weather_data){
year_data = read.csv(paste0(path_meta, file), fileEncoding = "euc-kr", stringsAsFactors = F)
year_data = year_data[, -1]
names(year_data) = c("date", "temp", "precipi", "wind", "snow")
year_data$date_ = as.Date(year_data$date, format = "%Y-%m-%d %H:%M")
year_data$date = as.integer(paste0(substr(year_data$date_, 1, 4),
substr(year_data$date_, 6, 7),
substr(year_data$date_, 9, 10)))
proced = year_data %>% group_by(date) %>%
summarise(mean_temp = mean(temp, na.rm = T),
mean_precipi = mean(precipi, na.rm = T),
mean_wind = mean(wind, na.rm = T),
mean_snow = mean(snow, na.rm = T)) %>%
mutate(IsRainyDay = ifelse(mean_precipi >= 1, 1, 0))
weather_res = rbind(weather_res, proced)
}
# weather dust merging
weather_dust_df = left_join(weather_res, dust_res, by = "date")
dust_res
dust_res
head(dust_res)
names(dust_res) = c("date", "fine_dust", "hyper_dust",
"fine_dust_grade", "hyper_dust_grade", "IsDustyDay")
head(dust_res)
head(weather_res)
# weather dust merging
weather_dust_df = left_join(dust_res, weather_res, by = "date")
names(dust_res) = c("date", "district","fine_dust", "hyper_dust",
"fine_dust_grade", "hyper_dust_grade", "IsDustyDay")
names(dust_res)
# weather dust merging
weather_dust_df = left_join(dust_res, weather_res, by = "date")
head(weather_dust_df)
path_res
write.csv(weather_dust_df, paste0(path_res, "weather_dust_proc_by_gu.csv"))
rm(list = ls())
library(dplyr)
path_meta = "~/GitRepo/Multicampus_semi/JH_working/data/"
path_res = "~/GitRepo/Multicampus_semi/JH_working/proc/"
# load pop_data
pop = read.csv(paste0(path_res, "local_pop_weekend.csv"), stringsAsFactors = F)[, -1]
pop[pop == "*"] = NA
pop[, 5:length(pop)] = apply(pop[, 5:length(pop)], 2, as.integer)
# 16개 백화점 집계구 포함
pop_df = pop %>% group_by(date, 집계구) %>%
summarise(mean_pop = mean(총생활인구)) %>%
rename(code = 집계구)
# load department meta data
department = read.csv(paste0(path_meta, "department.csv"), stringsAsFactors = F)
codes = departments$code
# load department meta data
department = read.csv(paste0(path_meta, "department.csv"), stringsAsFactors = F)
codes = department$code
# load subway_data
subway = read.csv(paste0(path_res, "weekend_subway.csv"), stringsAsFactors = F)[, -1]
subway = subway %>% rename(subway_code = station_no) %>%
select(-c(station_name))
# load weather dust data
weather_dust = read.csv(paste0(path_res, "weather_dust_proc_by_gu.csv"), stringsAsFactors = F)[,-1]
weather_dust[is.na(weather_dust)] = 0
pop_df
head(department[, 1:7])
# joining objects
df = left_join(pop_df, department[, 1:7], by = c("code"))
df = inner_join(df, subway, by = c("date", "subway_code"))
weather_dust
head(weather_dust)
department[, c(1, 10)]
gu_code = department[, c(1, 10)]
inner_join(weather_dust, gu_code, by = "measuring_station")
weather_dust
inner_join(weather_dust, gu_code, by.x = "district", by.y = "measuring_station")
?inner_join
inner_join(weather_dust, gu_code, by.= c("district" = "measuring_station"))
inner_join(weather_dust, gu_code, by= c("district" = "measuring_station"))
weather_dust = inner_join(weather_dust, gu_code, by= c("district" = "measuring_station"))
df
df = inner_join(df, weather_dust, by = c("date", "code"))
df
View(df)
hist(df$mean_pop)
hist(log(df$mean_pop))
model = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + mean_temp + mean_precipi + mean_wind + mean_snow +
fine_dust_grade + hyper_dust_grade, data = df)
summary(model)
model8 = lm(log(mean_pop) ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust_grade + hyper_dust_grade +
mean_precipi + mean_temp + mean_wind + mean_snow,
data = df)
summary(model8)
step(model8, direction = "both")
model9  = lm(log(mean_pop) ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust + hyper_dust +
mean_precipi + mean_temp + mean_snow + mean_wind,
data = df)
step(model9, direction = "both")
model9_step = lm(formula = log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust + hyper_dust,
data = df)
summary(model9_step)
hist(df$fine_dust)
hist(log(df$fine_dust))
hist(log(df$hyper_dust))
model9  = lm(log(mean_pop) ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + log(fine_dust) + log(hyper_dust) +
mean_precipi + mean_temp + mean_snow + mean_wind,
data = df)
step(model9, direction = "both")
model9  = lm(log(mean_pop) ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust + hyper_dust +
mean_precipi + mean_temp + mean_snow + mean_wind,
data = df)
step(model9, direction = "both")
model10  = lm(log(mean_pop) ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust_grade + hyper_dust_grade +
mean_precipi + mean_temp + mean_snow + mean_wind,
data = df)
step(model10, direction = "both")
model10_step = lm(formula = log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust_grade,
data = df)
summary(model10_step)
model10  = lm(log(mean_pop) ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust_grade + hyper_dust_grade +
mean_precipi + mean_temp,
data = df)
step(model10, direction = "both")
model11 = lm(log(mean_pop) ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + factor(IsDustyDay) + factor(IsRainyDay) +
mean_precipi + mean_temp,
data = df)
step(model11, direction = "both")
model11_step = lm(formula = mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + factor(IsDustyDay) +
factor(IsRainyDay), data = df)
summary(model11_step)
model11_step = lm(formula = mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + factor(IsDustyDay),
data = df)
summary(model11_step)
model9_step = lm(formula = log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust,
data = df)
summary(model9_step)
model9_step = lm(formula = log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust + hyper_dust,
data = df)
summary(model9_step)
plot(model9_step)
step(model9, direction = "backward")
step(model9, direction = "both")
model9_step = lm(formula = log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust + hyper_dust,
data = df)
exp(model9_step$coefficients)
model9_step = lm(formula = log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust * hyper_dust,
data = df)
summary(model9_step)
model9  = lm(log(mean_pop) ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust * hyper_dust +
mean_precipi + mean_temp + mean_snow + mean_wind,
data = df)
step(model9, direction = "both")
step(model9, direction = "both")
temp = step(model9, direction = "both")
View(temp)
temp$coefficients
exp(temp$coefficients)
model9_step = step(model9, direction = "both")
summary(model9_step)
model9  = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust * hyper_dust +
mean_precipi + mean_temp + mean_snow + mean_wind,
data = df)
model9_step = step(model9, direction = "both")
plot(model9_set)
plot(model9_step)
model9  = lm(log(mean_pop) ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust * hyper_dust +
mean_precipi + mean_temp + mean_snow + mean_wind,
data = df)
model9_step = step(model9, direction = "both")
model9_step = lm(formula = log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + hyper_dust,
data = df)
summary(model9_step)
model9_step = lm(formula = log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + hyper_dust + mean_temp,
data = df)
summary(model9_step)
model9_step = lm(formula = log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + hyper_dust + mean_precipi,
data = df)
summary(model9_step)
model9_step = lm(formula = log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + hyper_dust + hyper_dust_grade,
data = df)
summary(model9_step)
model9_step = lm(formula = log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + factor(IsRainyDay) + hyper_dust,
data = df)
summary(model9_step)
model9_step = lm(formula = log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust + hyper_dust,
data = df)
summary(model9_step)
plot(model9_step)
paste0(path_res, "final_df_for_analysis.Rdata")
save(df, file = paste0(path_res, "final_df_for_liner_model.Rdata"))
library(caret)
install.packages("caret")
library(caret)
rm(list = ls())
path_res = "~/GitRepo/Multicampus_semi/JH_working/proc/"
# load data set
load(paste0(path_res, "final_df_for_liner_model.Rdata"))
idx = createDataPartition(df, p = 0.7, list = F)
?createDataPartition
df
df = as.data.frame(df)
idx = createDataPartition(df, p = 0.7, list = F)
idx = createDataPartition(df, p = 0.8, list = F)
idx = createDataPartition(df$mean_pop, p = 0.8, list = F)
train_data = df[idx, ]
df$code = as.factor(df$code)
idx = createDataPartition(df$mean_pop, p = 0.8, list = F)
idx = createDataPartition(df$mean_pop, p = 0.8, list = F)
train_data = df[idx, ]
test_data =
table(train_data$code)
table(train_data$code)
test_data = df[-idx, ]
table(test_data$code)
model = lm(formula = log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust + hyper_dust,
data = train_data)
distPred <- predict(model, test_data)
actuals_preds <- data.frame(cbind(actuals = test_data$mean_pop, predicteds = distPred))
correlation_accuracy <- cor(actuals_preds)
actuals_preds
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
mape
head(actuals_preds)
View(actuals_preds)
actuals_preds$predicteds - actuals_preds$actuals
abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals
summary(model)
actuals_preds <- data.frame(cbind(actuals = log(test_data$mean_pop), predicteds = distPred))
correlation_accuracy <- cor(actuals_preds)
head(actuals_preds)
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
mape
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals) * 100
mape
## CV
dim(df)
## CV
nrow(df)
## CV
nrow(df) / 10
## CV
nrow(df) %/% 10
## CV
data_num = nrow(df) %/% 10
row_idx = 1
1 + (row_idx - 1) * 428
row_idx * 428
start = 1 + (row_idx - 1) * 428
end   = row_idx * 428
test_data = df[start:end, ]
train_data = df[-c(start:end), ]
for (row_idx in 1:10){
start = 1 + (row_idx - 1) * 428
end   = row_idx * 428
paste(start, end)
# test_data = df[start:end, ]
# train_data = df[-c(start:end), ]
}
for (row_idx in 1:10){
start = 1 + (row_idx - 1) * 428
end   = row_idx * 428
print(paste(start, end))
# test_data = df[start:end, ]
# train_data = df[-c(start:end), ]
}
mape_res = NULL
for (row_idx in 1:10){
start = 1 + (row_idx - 1) * 428
end   = row_idx * 428
test_data = df[start:end, ]
train_data = df[-c(start:end), ]
model = lm(formula = log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust + hyper_dust,
data = train_data)
distPred <- predict(model, test_data)
actuals_preds <- data.frame(cbind(actuals = log(test_data$mean_pop), predicteds = distPred))
correlation_accuracy <- cor(actuals_preds)
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals) * 100
mape_res = rbind(mape_res, mape)
}
mape_res
test = as.data.frame(mape)
test
mape_res = NULL
for (row_idx in 1:10){
start = 1 + (row_idx - 1) * 428
end   = row_idx * 428
test_data = df[start:end, ]
train_data = df[-c(start:end), ]
model = lm(formula = log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust + hyper_dust,
data = train_data)
distPred <- predict(model, test_data)
actuals_preds <- data.frame(cbind(actuals = log(test_data$mean_pop), predicteds = distPred))
correlation_accuracy <- cor(actuals_preds)
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals) * 100
mape_res = rbind(mape_res, as.data.frame(mape))
}
mape_res
mean(mape_res)
mape_res
mean(mape_res$mape)
mean_error = mean(mape_res$mape)
print(mean_error)
size
rm(list = ls())
path_res = "~/GitRepo/Multicampus_semi/JH_working/proc/"
# load data set
load(paste0(path_res, "final_df_for_liner_model.Rdata"))
df = as.data.frame(df)
df$code = as.factor(df$code)
install.packages("randomForest")
library(randomForest)
names(df)
randomForest(log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust + hyper_dust +
mean_temp + mean_precipi + mean_wind + mean_snow,
data = df, importance = T)
library(rpart)
model = rpart(log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust + hyper_dust +
mean_temp + mean_precipi + mean_wind + mean_snow,
data = df, control = rpart.control(minsplit = 2))
plot(model)
install.packages("rattle")
install.packages("rpart.plot")
library(rpart.plot)
library(rattle)
library(RColorBrewer)
rpart.plot(model)
model = rpart(log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust + hyper_dust +
mean_temp + mean_precipi + mean_wind + mean_snow,
data = df)
model2 = rpart(log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust + hyper_dust +
mean_temp + mean_precipi + mean_wind + mean_snow,
data = df)
rpart.plot(model2)
random_model = randomForest(log(mean_pop) ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust + hyper_dust +
mean_temp + mean_precipi + mean_wind + mean_snow,
data = df, importance = T)
summary(random_model)
random_model
pred = predict(random_model, log(df$mean_pop))
pred = predict(random_model, df)
pred
pred
mape <- mean(abs((pred - log(df$mean_pop)))/log(df$mean_pop)) * 100
mape
rm(list = ls())
install.packages("rmarkdown")
install.packages("knitr")
library(rmarkdown)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdonw)
library(rmarkdown)
sessionInfo()
library(rmarkdown)
library(knitr)
unlink('~/GitRepo/Multicampus_semi/JH_working/project_report/project_report_cache', recursive = TRUE)
library(stringr)
library(stirngi)
install.packages("stirngi")
library(stringi)
install.packages("blogdown")
library(blogdown)
remove.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
library(knitr)
