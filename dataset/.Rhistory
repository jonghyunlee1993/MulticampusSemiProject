return(IsDustyDay)
}
dust_res = NULL
for (file in air_data){
year_data = read.csv(file, stringsAsFactors = F)
fine_avg = dust_avg(year_data, 7)
hyper_avg = dust_avg(year_data, 8)
fine_dust_grade = apply(fine_avg[2], 1, dust_grade_calculator)
hyper_dust_grade = apply(hyper_avg[2], 1, hyper_dust_grade_calculator)
IsDustyDay = apply(cbind(fine_dust_grade, hyper_dust_grade), 1, IsDusty)
year_dust = left_join(fine_avg, hyper_avg, by = "date")
year_dust = cbind(year_dust, fine_dust_grade, hyper_dust_grade, IsDustyDay)
dust_res = rbind(dust_res, year_dust)
}
names(dust_res) = c("date", "fine_dust", "hyper_dust",
"fine_dust_grade", "hyper_dust_grade", "IsDustyDay")
# weather dust merging
weather_dust_df = left_join(weather_res, dust_res, by = "date")
write.csv(weather_dust_df, paste0(path_res, "weather_dust_proc.csv"))
rm(list = ls())
options(scipen = 100)
library(plm)
library(dplyr)
path_meta = "~/GitRepo/Multicampus_semi/JH_working/data/"
path_res = "~/GitRepo/Multicampus_semi/JH_working/proc/"
# load pop_data
pop = read.csv(paste0(path_res, "local_pop_weekend.csv"), stringsAsFactors = F)[, -1]
pop$집계구 = as.factor(df$집계구)
pop[pop == "*"] = NA
pop[, 5:length(pop)] = as.integer(pop[, 5:length(pop)])
pop[, 5:length(pop)] = apply(pop[, 5:length(pop)], 2, as.integer)
# load pop_data
pop = read.csv(paste0(path_res, "local_pop_weekend.csv"), stringsAsFactors = F)[, -1]
pop$집계구 = as.factor(df$집계구)
pop
pop$집계구 = as.factor(df$집계구)
# load pop_data
pop = read.csv(paste0(path_res, "local_pop_weekend.csv"), stringsAsFactors = F)[, -1]
pop$집계구 = as.factor(pop$집계구)
pop[pop == "*"] = NA
pop[, 5:length(pop)] = as.integer(pop[, 5:length(pop)])
pop[, 5:length(pop)] = apply(pop[, 5:length(pop)], 2, as.integer)
pop[pop == "*"] = NA
pop
pop[, 5:length(pop)] = as.integer(pop[, 5:length(pop)])
pop
pop[, 5:length(pop)]
# load pop_data
pop = read.csv(paste0(path_res, "local_pop_weekend.csv"), stringsAsFactors = F)[, -1]
pop$집계구 = as.factor(pop$집계구)
pop[pop == "*"] = NA
pop[, 5:length(pop)] = as.integer(pop[, 5:length(pop)])
pop[, 5:length(pop)]
apply(pop[, 5:length(pop)], 2, as.integer)
pop[, 5:length(pop)] = apply(pop[, 5:length(pop)], 2, as.integer)
pop_df = pop %>% group_by(date, 집계구) %>%
summarise(mean_pop = mean(총생활인구)) %>%
rename(code = 집계구)
# load department meta data
department = read.csv(paste0(path_meta, "department.csv"), stringsAsFactors = F)
# load subway_data
subway = read.csv(paste0(path_res, "weekend_subway.csv"), stringsAsFactors = F)[, -1]
subway = subway %>% rename(subway_code = station_no) %>%
select(-c(station_name))
# load weather dust data
weather_dust = read.csv(paste0(path_res, "weather_dust_proc.csv"), stringsAsFactors = F)[,-1]
weather_dust[is.na(weather_dust)] = 0
# joining objects
df = left_join(pop_df, department[, 1:7], by = c("code"))
df = inner_join(df, subway, by = c("date", "subway_code"))
df = inner_join(df, weather_dust, by = "date")
# load pop_data
pop = read.csv(paste0(path_res, "local_pop_weekend.csv"), stringsAsFactors = F)[, -1]
pop[pop == "*"] = NA
pop[, 5:length(pop)] = apply(pop[, 5:length(pop)], 2, as.integer)
pop_df = pop %>% group_by(date, 집계구) %>%
summarise(mean_pop = mean(총생활인구)) %>%
rename(code = 집계구)
# load department meta data
department = read.csv(paste0(path_meta, "department.csv"), stringsAsFactors = F)
# load subway_data
subway = read.csv(paste0(path_res, "weekend_subway.csv"), stringsAsFactors = F)[, -1]
subway = subway %>% rename(subway_code = station_no) %>%
select(-c(station_name))
# load weather dust data
weather_dust = read.csv(paste0(path_res, "weather_dust_proc.csv"), stringsAsFactors = F)[,-1]
weather_dust[is.na(weather_dust)] = 0
# joining objects
df = left_join(pop_df, department[, 1:7], by = c("code"))
df = inner_join(df, subway, by = c("date", "subway_code"))
df = inner_join(df, weather_dust, by = "date")
# make panel dataset
pd = pdata.frame(pop_df, index = c("date", "code"))
pdim(pd)
within_model = plm(mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + mean_temp +
mean_precipi + mean_wind + mean_snow + factor(IsRainyDay) +
factor(IsDustyDay), data = df, model = "within")
within_model = plm(mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + mean_temp +
mean_precipi + mean_wind + mean_snow + factor(IsRainyDay) +
factor(IsDustyDay), data = pd, model = "within")
names(pd)
# make panel dataset
pd = pdata.frame(df, index = c("date", "code"))
pdim(pd)
names(pd)
within_model = plm(mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + mean_temp +
mean_precipi + mean_wind + mean_snow + factor(IsRainyDay) +
factor(IsDustyDay), data = pd, model = "within")
View(pd)
within_model = plm(mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + mean_temp +
mean_precipi + mean_wind + mean_snow + as.factor(IsRainyDay) +
as.factor(IsDustyDay), data = pd, model = "within")
test_model = plm(mean_pop ~ size, data = pd, model = "within")
# make panel dataset
pd = pdata.frame(as.data.frame(df), index = c("date", "code"))
pdim(pd)
test_model
test_model = plm(mean_pop ~ size, data = pd, model = "within")
within_model = plm(mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + mean_temp +
mean_precipi + mean_wind + mean_snow + factor(IsRainyDay) +
factor(IsDustyDay), data = pd, model = "within")
summary(within_model)
random_model = plm(mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + mean_temp +
mean_precipi + mean_wind + mean_snow + factor(IsRainyDay) +
factor(IsDustyDay), data = pd, model = "random")
phtest(random_model, within_model)
within_model = plm(mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + mean_temp +
mean_precipi + mean_wind + mean_snow + fine_dust_grade +
hyper_dust_grade, data = pd, model = "within")
summary(within_model)
model = lm(mean_pop ~ size + residencial_area + commercial_area + green_area +
pop_density + arrival + mean_temp + mean_precipi + mean_wind + mean_snow +
fine_dust_grade + hyper_dust_grade, data = df)
model = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + mean_temp + mean_precipi + mean_wind + mean_snow +
fine_dust_grade + hyper_dust_grade, data = df)
summary(model)
model2 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + mean_temp + mean_precipi + mean_wind + mean_snow +
fine_dust + hyper_dust, data = df)
summary(model2)
summary(model)
model3 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + factor(IsDustyDay) + factor(IsRainyDay),
data = df)
summary(model3)
summary(model3)
rm(pd)
model4 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust_grade + hyper_dust_grade,
data = df)
summary(model4)
model4 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust_grade + hyper_dust_grade + mean_precipi,
data = df)
summary(model4)
model5 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust + hyper_dust + mean_precipi,
data = df)
summary(model5)
model6 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust + hyper_dust + mean_precipi +
mean_temp + mean_snow + mean_wind,
data = df)
summary(model6)
model3 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + factor(IsDustyDay) + factor(IsRainyDay),
data = df)
summary(model3)
model7 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + factor(IsDustyDay) + factor(IsRainyDay) +
mean_wind + mean_temp + mean_snow,
data = df)
summary(model7)
model8 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + factor(IsDustyDay),
data = df)
summary(model8)
model8 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + factor(IsDustyDay) + mean_precipi,
data = df)
summary(model8)
model8 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + factor(IsDustyDay) + mean_temp,
data = df)
summary(model8)
model8 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + factor(IsDustyDay) + mean_temp + mean_wind,
data = df)
summary(model8)
model8 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + factor(IsDustyDay) + factor(IsRainyDay) +
mean_temp + mean_wind + mean_snow,
data = df)
summary(model8)
step(model8, direction = "both")
step(model8, direction = "foward")
step(model8, direction = "forward")
step(model8, direction = "backword")
step(model8, direction = "backward")
model8 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust_grade + hyper_dust_grade +
mean_precipi + mean_temp + mean_wind + mean_snow,
data = df)
summary(model8)
step(model8, direction = "backward")
step(model8, direction = "both")
model9  = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust + hyper_dust +
mean_precipi + mean_temp + mean_wind + mean_snow,
data = df)
step(model9, direction = "both")
step(model9, direction = "backward")
model9  = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust + hyper_dust +
mean_precipi + mean_temp,
data = df)
step(model9, direction = "backward")
step(model9, direction = "both")
model10  = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust_grade + hyper_dust_grade +
mean_precipi + mean_temp,
data = df)
step(model10, direction = "both")
final_model = lm(formula = mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust_grade + mean_temp,
data = df)
summary(final_model)
model11 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + factor(IsDustyDay) + factor(IsRainyDay) +
mean_precipi + mean_temp,
data = df)
step(model11, direction = "both")
final_modle = lm(formula = mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + factor(IsDustyDay) + mean_temp,
data = df)
summary(final_model)
model10  = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust_grade + hyper_dust_grade +
mean_precipi + mean_temp,
data = df)
step(model10, direction = "both")
model10_step = lm(formula = mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust_grade + mean_temp,
data = df)
summary(model10_stp)
summary(model10_step)
model9  = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust + hyper_dust +
mean_precipi + mean_temp,
data = df)
step(model9, direction = "both")
model9_step = lm(formula = mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust + mean_temp,
data = df)
summary(model9_step)
model9_step = lm(formula = mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust + hyper_dust + mean_temp,
data = df)
summary(model9_step)
model9  = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust + hyper_dust +
mean_precipi + mean_temp,
data = df)
step(model9, direction = "both")
model9_step = lm(formula = mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust + mean_temp,
data = df)
summary(model9_step)
summary(model9_step)
plot(model9_step)
rm(list = ls())
load("local_pop_weekend.Rdata")
data = res
rm(list = ls())
path_res = "~/GitRepo/Multicampus_semi/JH_working/proc/"
load(paste0(path_res, "local_pop_weekend.Rdata"))
data = res
library(dplyr)
show_hist = function(code){
data = data %>% filter(집계구 == code) %>%
group_by(date) %>%
summarise(mean_visit = mean(총생활인구))
print(hist(data$mean_visit, main = paste("Hist of", code)))
}
codes = unique(data$집계구)
for (code in codes){
show_hist(code)
}
path_meta = "~/GitRepo/Multicampus_semi/JH_working/data/"
path_res = "~/GitRepo/Multicampus_semi/JH_working/proc/"
# load pop_data
pop = read.csv(paste0(path_res, "local_pop_weekend.csv"), stringsAsFactors = F)[, -1]
pop[pop == "*"] = NA
pop[, 5:length(pop)] = apply(pop[, 5:length(pop)], 2, as.integer)
pop_df = pop %>% group_by(date, 집계구) %>%
summarise(mean_pop = mean(총생활인구)) %>%
rename(code = 집계구)
pop_df[pop_df$code == 1113075030009, ]$mean_pop
hist(pop_df[pop_df$code == 1113075030009, ]$mean_pop)
pop_df[pop_df$code == 1115051010002, ]$mean_pop
pop_df[pop_df$code == 1121052010001, ]$mean_pop
hist(pop_df[pop_df$code == 1121052010001, ]$mean_pop)
var(pop_df[pop_df$code == 1121052010001, ]$mean_pop)
sd(pop_df[pop_df$code == 1121052010001, ]$mean_pop)
sd(pop_df[pop_df$code == 1115051010002, ]$mean_pop)
sd(pop_df[pop_df$code == 1113075030009, ]$mean_pop)
sd(pop_df[pop_df$code == 1123063020012, ]$mean_pop)
hist(pop_df[pop_df$code == 1123063020012, ]$mean_pop)
pop_df[pop_df$code == 1123063020012, ]$mean_pop
sd(pop_df[pop_df$code == 1123063020012, ]$mean_pop)
sd(pop_df[pop_df$code == 1121052010001, ]$mean_pop)
sd(pop_df[pop_df$code == 1115051010002, ]$mean_pop)
sd(pop_df[pop_df$code == 1113075030009, ]$mean_pop)
hist(pop_df[pop_df$code == 1113075030009, ]$mean_pop)
hist(pop_df[pop_df$code == 1115051010002, ]$mean_pop)
hist(pop_df[pop_df$code == 1121052010001, ]$mean_pop)
sd(pop_df[pop_df$code == 1121052010001, ]$mean_pop)
sd(pop_df[pop_df$code == 1113075030009, ]$mean_pop)
sd(pop_df[pop_df$code == 1123063020012, ]$mean_pop)
sd(pop_df[pop_df$code == 1121052010001, ]$mean_pop)
# load pop_data
pop = read.csv(paste0(path_res, "local_pop_weekend.csv"), stringsAsFactors = F)[, -1]
pop[pop == "*"] = NA
pop[, 5:length(pop)] = apply(pop[, 5:length(pop)], 2, as.integer)
pop
rm(list = ls())
path_meta = "~/GitRepo/Multicampus_semi/JH_working/data/"
path_res = "~/GitRepo/Multicampus_semi/JH_working/proc/"
# load pop_data
pop = read.csv(paste0(path_res, "local_pop_weekend.csv"), stringsAsFactors = F)[, -1]
pop[pop == "*"] = NA
pop[, 5:length(pop)] = apply(pop[, 5:length(pop)], 2, as.integer)
unique(pop$집계구)
pop_df = pop %>% group_by(date, 집계구) %>%
summarise(mean_pop = mean(총생활인구)) %>%
rename(code = 집계구) %>%
filter(code != c(1113075030009, 1121052010001))
unique(pop_df$code)
warnings()
pop_df$code == 1121052010001, ]$mean_pop
pop_df[pop_df$code == 1121052010001, ]$mean_pop
pop_df = pop %>% group_by(date, 집계구) %>%
summarise(mean_pop = mean(총생활인구)) %>%
rename(code = 집계구) %>%
filter(code != c(1113075030009, 1121052010001))
pop_df = pop %>% group_by(date, 집계구) %>%
summarise(mean_pop = mean(총생활인구)) %>%
rename(code = 집계구) %>%
filter(code == c(1113075030009, 1121052010001))
pop_df
unique(pop_df$code)
unique(pop$집계구)
pop_df = pop %>% group_by(date, 집계구) %>%
summarise(mean_pop = mean(총생활인구)) %>%
rename(code = 집계구) %>%
filter(code %in% c(1113075030009, 1121052010001))
pop_df = pop %>% group_by(date, 집계구) %>%
summarise(mean_pop = mean(총생활인구)) %>%
rename(code = 집계구) %>%
filter(!code %in% c(1113075030009, 1121052010001))
unique(pop_df$code)
# load department meta data
department = read.csv(paste0(path_meta, "department.csv"), stringsAsFactors = F)
# load subway_data
subway = read.csv(paste0(path_res, "weekend_subway.csv"), stringsAsFactors = F)[, -1]
subway = subway %>% rename(subway_code = station_no) %>%
select(-c(station_name))
department[department$code %in% c(1113075030009, 1121052010001), ]$fullname
# load subway_data
subway = read.csv(paste0(path_res, "weekend_subway.csv"), stringsAsFactors = F)[, -1]
subway = subway %>% rename(subway_code = station_no) %>%
select(-c(station_name))
# load weather dust data
weather_dust = read.csv(paste0(path_res, "weather_dust_proc.csv"), stringsAsFactors = F)[,-1]
weather_dust[is.na(weather_dust)] = 0
# joining objects
df = left_join(pop_df, department[, 1:7], by = c("code"))
df = inner_join(df, subway, by = c("date", "subway_code"))
df = inner_join(df, weather_dust, by = "date")
# make panel dataset
pd = pdata.frame(as.data.frame(df), index = c("date", "code"))
pdim(pd)
model = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + mean_temp + mean_precipi + mean_wind + mean_snow +
fine_dust_grade + hyper_dust_grade, data = df)
summary(model)
model2 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + mean_temp + mean_precipi + mean_wind + mean_snow +
fine_dust + hyper_dust, data = df)
summary(model2)
model3 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + factor(IsDustyDay) + factor(IsRainyDay),
data = df)
summary(model3)
model4 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust_grade + hyper_dust_grade + mean_precipi,
data = df)
summary(model4)
model5 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust + hyper_dust + mean_precipi,
data = df)
summary(model5)
model6 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust + hyper_dust + mean_precipi +
mean_temp + mean_snow + mean_wind,
data = df)
summary(model6)
model7 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + factor(IsDustyDay) + factor(IsRainyDay) +
mean_wind + mean_temp + mean_snow,
data = df)
summary(model7)
model8 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust_grade + hyper_dust_grade +
mean_precipi + mean_temp + mean_wind + mean_snow,
data = df)
summary(model8)
step(model8, direction = "both")
model9  = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust + hyper_dust +
mean_precipi + mean_temp,
data = df)
step(model9, direction = "both")
model9_step = lm(formula = mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust + mean_temp,
data = df)
summary(model9_step)
model10  = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + fine_dust_grade + hyper_dust_grade +
mean_precipi + mean_temp,
data = df)
step(model10, direction = "both")
model10_step = lm(formula = mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust_grade + mean_temp,
data = df)
summary(model10_step)
model11 = lm(mean_pop ~ size + residential_area + commercial_area + green_area +
pop_density + arrival + factor(IsDustyDay) + factor(IsRainyDay) +
mean_precipi + mean_temp,
data = df)
step(model11, direction = "both")
model9_step = lm(formula = mean_pop ~ size + residential_area + commercial_area +
green_area + pop_density + arrival + fine_dust + mean_temp,
data = df)
summary(model9_step)
plot(model9_step)
vif
library(car)
vif(model9_step)
rm(list = ls())
path_meta = "~/GitRepo/Multicampus_semi/JH_working/data/"
data = read.csv(paste0(path_meta, "department.csv"), stringsAsFactors = F)
departments = data %>% select(company, lon = lon, lat = lat) %>% as.data.frame
cen <- c(mean(departments$lon), mean(departments$lat))
library(ggmap)
library(ggplot2)
library(ggmap)
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 11)
register_google(key='AIzaSyD8k2DWC_7yFHCrH6LDR3RfITsmWMEqC8c')
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 11)
ggmap(map) +
geom_point(data = departments, colour = factor(company), size = 4, alpha = 0.5) +
geom_label(data = departments, label = company, nudge_x = 0.04, alpha = 0, label.size = NA)
ggmap(map) +
geom_point(data = departments, colour = factor(company), size = 4, alpha = 0.5) +
geom_label(data = departments, label = departments$company, nudge_x = 0.04, alpha = 0, label.size = NA)
ggmap(map) +
geom_point(data = departments, colour = factor(department$company), size = 4, alpha = 0.5) +
geom_label(data = departments, label = departments$company, nudge_x = 0.04, alpha = 0, label.size = NA)
ggmap(map) +
geom_point(data = departments, colour = factor(departments$company), size = 4, alpha = 0.5) +
geom_label(data = departments, label = departments$company, nudge_x = 0.04, alpha = 0, label.size = NA)
ggmap(map) +
geom_point(data = departments, colour = as.factor(departments$company), size = 4, alpha = 0.5) +
geom_label(data = departments, label = departments$company, nudge_x = 0.04, alpha = 0, label.size = NA)
ggmap(map) +
geom_point(data = departments, colour = "red", size = 4, alpha = 0.5) +
geom_label(data = departments, label = departments$company, nudge_x = 0.04, alpha = 0, label.size = NA)
departments = data %>%
select(company, name, lon = lon, lat = lat) %>%
mutate(comp_factor = ifelse(company == "신세계", 1,
ifelse(company == "현대", 2, 3))) %>%
as.data.frame
departments = data %>%
select(company, name, lon = lon, lat = lat) %>%
mutate(comp_factor = ifelse(company == "신세계", 1,
ifelse(company == "현대", 2, 3))) %>%
apply(comp_factor, 2, as.factor) %>%
as.data.frame
departments = data %>%
select(company, name, lon = lon, lat = lat) %>%
mutate(comp_factor = ifelse(company == "신세계", 1,
ifelse(company == "현대", 2, 3))) %>%
sapply(comp_factor, as.factor) %>%
as.data.frame
departments = data %>%
select(company, name, lon = lon, lat = lat) %>%
mutate(comp_factor = ifelse(company == "신세계", 1,
ifelse(company == "현대", 2, 3))) %>%
as.data.frame
