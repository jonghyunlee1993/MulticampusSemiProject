chi_sq = (72 - man_glaxy_expect)**2/man_glaxy_expect +
(28 - woman_glaxy_expect)**2/woman_glaxy_expect +
(55 - man_iphone_expect)**2/man_iphone_expect +
(67 - woman_iphone_expect)**2/woman_iphone_expect
chi_sq
man_galaxy = 72
man_iphone = 55
woman_galaxy = 28
woman_iphone = 67
all = man_galaxy + man_iphone + woman_galaxy + woman_iphone
man = man_galaxy + man_iphone
woman = woman_galaxy + woman_iphone
galaxy = man_galaxy + woman_galaxy
iphone = man_iphone + woman_iphone
man_glaxy_expect = ((man/all) * (galaxy/all)) * all
woman_glaxy_expect = ((woman/all) * (galaxy/all)) * all
man_iphone_expect = ((man/all) * (iphone/all)) * all
woman_iphone_expect = ((woman/all) * (iphone/all)) * all
chi_sq = (72 - man_glaxy_expect)**2/man_glaxy_expect +
(28 - woman_glaxy_expect)**2/woman_glaxy_expect +
(55 - man_iphone_expect)**2/man_iphone_expect +
(67 - woman_iphone_expect)**2/woman_iphone_expect
chi_sq
rm(list=ls())
man_galaxy = 72
man_iphone = 55
woman_galaxy = 28
woman_iphone = 67
all = man_galaxy + man_iphone + woman_galaxy + woman_iphone
man = man_galaxy + man_iphone
woman = woman_galaxy + woman_iphone
galaxy = man_galaxy + woman_galaxy
iphone = man_iphone + woman_iphone
man_glaxy_expect = ((man/all) * (galaxy/all)) * all
woman_glaxy_expect = ((woman/all) * (galaxy/all)) * all
man_iphone_expect = ((man/all) * (iphone/all)) * all
woman_iphone_expect = ((woman/all) * (iphone/all)) * all
chi_sq = (man_galaxy - man_glaxy_expect)**2/man_glaxy_expect +
(woman_galaxy - woman_glaxy_expect)**2/woman_glaxy_expect +
(man_iphone - man_iphone_expect)**2/man_iphone_expect +
(woman_iphone - woman_iphone_expect)**2/woman_iphone_expect
chi_sq
data.frame(man = c(72,55), woman=c(28,67))
test = data.frame(man = c(72,55), woman=c(28,67))
chisq.test(test)
chisq.test()
chisq.test
chisq.test()
?chisq.test
library(rgdal)
data = readOGR(dsn = "C:/Users/student/Desktop/seoul", layer = "my_map")
plot(data)
data@data$ADM_NM = Encoding("UTF-8")
plot(data)
plot(data)
View(data)
rm(list = ls())
data = read.csv("C:/R_study_secret/data/one_sample.csv", header = T)
head(data)
x = data$time
sum(is.na(x))
summary(x)
mean(x, na.rm = T)
x1 = na.omit(x)
x1
summary(x1)
shapiro.test(x1)
# 정규성을 따르는 것이 귀무가설
shapiro.test(x1)
hist(x1)
qqnorm(x1)
data2 = read.csv("C:/R_study_secret/data/two_sample.csv", header = T)
head(data2)
x = data2$method
y = data2$survey
table(x)
table(y)
table(x,y,useNA = 'ifany')
t.test(x, y)
prop.test(x, y)
prop.test(c(x, y))
prop.test(x)
prop.test(c(x[1], x[2]))
prop.test(c(110, 135), c(150, 150))
?prop.test
prop.test(c(110, 135), c(150, 150), alternative = "greater")
prop.test(c(110, 135), c(150, 150), alternative = "less")
# 150명 중에 110명 / 150명 중에 135명 식으로 매핑
# H0: 두 사건의 발생 빈도는 차이가 없다
prop.test(c(110, 135), c(150, 150))
prop.test(c(110, 135), c(150, 150), alternative = "less")
# 150명 중에 110명 / 150명 중에 135명 식으로 매핑
# H0: 두 사건의 발생 빈도는 차이가 없다
prop.test(c(110, 135), c(150, 150))
prop.test(c(110, 135), c(150, 150), alternative = "less")
# subset은 R에서 유일하게 행 단위 연산을 실시함
res = subset(data2, !is.na(score), c(method, score))
res
summary(res)
length(res)
length(res,1)
length(res,2)
?length
dim(res)
g1 = subset(res, method==1)
# 교육 방법별 그룹을 분할
g1 = subset(res, method==1)
g2 = subset(res, method==2)
t.test(g1, g2)
length(c(g1, g2))
length(g1)
length(g2)
length(g1$method)
length(g1$score)
length(g2$score)
mean(g1$score)
mean(g2$score)
hist(g1$score)
plot(g1$score)
barplot(g1$score, g2$score)
hist(g1$score, g2$score)
hist(g1$score)
hist(g2$score, add = T)
hist(g2$score, add = T, rgb=(1,0,0))
hist(g2$score, add = T, rgb=(0.8,0.2,0.2))
hist(g2$score, add = T, col=rgb(0.8,0.2,0.2))
hist(g1$score, add = T)
var.test(g1$score, g2$score)
installed.packages()
?t.test
t.test(g1, g2)
t.test(g1, g2, var.equal = T)
t.test(x, y)
t.test(x, y, var.equal = T)
t.test(x, y, var.equal = F) #
t.test(g1, g2, var.equal = T, alternative = "greater")
t.test(g1, g2, var.equal = T, alternative = "less")
t.test(g1, g2, var.equal = T, alternative = "two-sided")
t.test(g1, g2, var.equal = T, alternative = "two.sided")
# 대응 표본에 대한 T 검정: 대응 표본 t 검정 (동질표본)
data3 = read.csv("C:/R_study_secret/data/paired_sample.csv", header = T)
head(data3)
summary(data3)
res = subset(data3, !is.na(data$after), c(before, after))
head(res)
res = subset(data3, !is.na(after), c(before, after))
head(res)
x = res$before
y = res$after
var.test(x, y, paired=T)
t.test(x, y, paired=T)
t.test(x, y, paired=T, var.equal = T)
var.test(x, y, paired=T)
rm(list=ls())
data = read.csv("C:/R_study_secret/data/cleanDescriptive.csv", header = T)
summary(data)
head(data)
x = data$level2
# level/level2는 부모의 학력
x = data$level2
# pass2는 대학 진학 여부
y = data$pass2
table(x,y)
table(x,y, usena = "ifany")
table(x,y)
sum(x)
table(x)
table(y)
my_data = data.frame(x, y)
my_data
chisq.test(my_data)
rm(my_data)
install.packages(c("gmodels"))
library(gmodels)
diamonds = diamonds
diamond = diamonds
library(ggplot2)
diamond = diamonds
summary(diamond)
CrossTable(x,y)
summary(diamond)
CrossTable(diamond$color, diamond$price)
CrossTable(diamond$color, diamond$clarity)
?CrossTable
rm(list=ls())
library(gmodels)
library(ggplot2)
diamond = diamonds
CrossTable(x,y)
CrossTable(diamonds$color, diamonds$clarity)
CrossTable(x,y)
# level/level2는 부모의 학력
x = data$level2
# pass2는 대학 진학 여부
y = data$pass2
table(x,y)
data = read.csv("C:/R_study_secret/data/cleanDescriptive.csv", header = T)
head(data)
summary(data)
# level/level2는 부모의 학력
x = data$level2
# pass2는 대학 진학 여부
y = data$pass2
table(x,y)
CrossTable(x,y)
CrossTable(x,y,chisq = T)
rm(list=ls())
data(cars)
data = cars
rm(cars)
summary(data)
model = lm(dist ~ speed, data)
summary(model)
library(cars)
install.packages("cars")
?shapiro.test
?qqnormal
qqnorm
?qqnorm
model = lm(dist ~ speed, data = cars)
summary(model)
View(cars)
par(mfrow = c(2, 2), mar = c(1, 1, 1, 1))
plot(model)
par(mfrow = c(2, 2), mar = c(3, 3, 3, 3))
plot(model)
par(mfrow = c(2, 2), mar = c(2, 2, 2, 2))
plot(model)
install.packages("lmtest")
library(lmtest)
dwtest(model)
rm(list = ls())
# iris dataset
data = iris
# logisitc은 2개의 변수를 취하기 때문에 subset 함수로 조건 추출
# subset은 행 단위 추출
d = subset(iris, Spieces %in% c("virginica", "setosa"))
# logisitc은 2개의 변수를 취하기 때문에 subset 함수로 조건 추출
# subset은 행 단위 추출
d = subset(data, Spieces %in% c("virginica", "setosa"))
str(data)
# logisitc은 2개의 변수를 취하기 때문에 subset 함수로 조건 추출
# subset은 행 단위 추출
d = subset(data, Species %in% c("virginica", "setosa"))
dim(d)
glm(Species ~ ., family="binomial"(link="logit"), data=d)
model = glm(Species ~ Sepal.Length + Sepal.Width, family="binomial"(link="logit"), data=d)
summary(model)
plot(model)
model = glm(Species ~ ., family="binomial"(link="logit"), data=d)
summary(model)
model = glm(Species ~ ., family="binomial", data=d)
?glm
View(d)
unique(data$Species)
# logisitc은 2개의 변수를 취하기 때문에 subset 함수로 조건 추출
# subset은 행 단위 추출
d = subset(data, Species %in% c("virginica", "versicolor"))
model = glm(Species ~ .,
family = "binomial", data = d)
summary(model)
View(iris3)
?iris3
model2 = glm(Species ~ ., family = "binomial", data = data)
summary(model2)
fitted(m)[c(1:5, 51:55)]
fitted(model)[c(1:5, 51:55)]
round(fitted(model)[c(1:5, 51:55)])
library(ggplot2)
d %>%
mutate(prob = ifelse(d == "versicolor", 1, 0)) %>%
ggplot(aes(Sepal.Length, prob)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(
title = "Logistic Regression Model",
x = "Plasma Glucose Concentration",
y = "Probability of being diabete-pos"
)
library(dplyr)
d %>%
mutate(prob = ifelse(d == "versicolor", 1, 0)) %>%
ggplot(aes(Sepal.Length, prob)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(
title = "Logistic Regression Model",
x = "Plasma Glucose Concentration",
y = "Probability of being diabete-pos"
)
d
# logisitc은 2개의 변수를 취하기 때문에 subset 함수로 조건 추출
# subset은 행 단위 추출
d = subset(data, Species %in% c("virginica", "versicolor"))
d
d %>%
mutate(prob = ifelse(d == "versicolor", 1, 0)) %>%
ggplot(aes(Sepal.Length, prob)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(
title = "Logistic Regression Model",
x = "Plasma Glucose Concentration",
y = "Probability of being diabete-pos"
)
d %>%
mutate(prob = ifelse(d$Species == "versicolor", 1, 0)) %>%
ggplot(aes(Sepal.Length, prob)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(
title = "Logistic Regression Model",
x = "Plasma Glucose Concentration",
y = "Probability of being diabete-pos"
)
d %>%
mutate(prob = ifelse(d$Species == "versicolor", 1, 0)) %>%
ggplot(aes(Sepal.Width, prob)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(
title = "Logistic Regression Model",
x = "Sepal.Length",
y = "Probability of being versicolor"
)
d %>%
mutate(prob = ifelse(d$Species == "versicolor", 1, 0)) %>%
ggplot(aes(Petal.Length, prob)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(
title = "Logistic Regression Model",
x = "Sepal.Length",
y = "Probability of being versicolor"
)
# logistic prediction
# Split the data into training and test set
set.seed(123)
training.samples = d$Species %>%
createDataPartition(p = 0.8, list = FALSE)
# logistic prediction
library(mlbench)
# Split the data into training and test set
set.seed(123)
training.samples = d$Species %>%
createDataPartition(p = 0.8, list = FALSE)
library(caret)
require("caret")
require(caret)
install.packages("caret")
library(caret)
training.samples = d$Species %>%
createDataPartition(p = 0.8, list = FALSE)
training.samples
train.data  <- d[training.samples, ]
test.data <- d[-training.samples, ]
test.data
train.data
model_predict = glm(Species ~ ., family = 'binomial', data = train.data)
pred = model %>% predict(test.data, type = "response")
pred
predicted.classes <- ifelse(pred > 0.5, "verginica", "vesicolor")
head(predicted.classes)
mean(predicted.classes == test.data$Species)
test.data$Species
predicted.classes <- ifelse(pred > 0.5, "verginica", "versicolor")
head(predicted.classes)
mean(predicted.classes == test.data$Species)
predicted.classes <- ifelse(pred > 0.5, "versicolor", "verginica")
head(predicted.classes)
mean(predicted.classes == test.data$Species)
predicted.classes <- ifelse(pred > 0.5, "verginica", "versicolor")
head(predicted.classes)
mean(predicted.classes == test.data$Species)
# Split the data into training and test set
set.seed(133)
training.samples = d$Species %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- d[training.samples, ]
test.data <- d[-training.samples, ]
d$Species
training.samples = d$Species %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- d[training.samples, ]
test.data <- d[-training.samples, ]
test.data
model_predict = glm(Species ~ ., family = 'binomial', data = train.data)
pred = model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(pred > 0.5, "versicolor", "virginica")
head(predicted.classes)
mean(predicted.classes == test.data$Species)
predicted.classes <- ifelse(pred > 0.5, "virginica", "versicolor")
head(predicted.classes)
mean(predicted.classes == test.data$Species)
f = fitted(model)
ifelse(f > .5, 1, 0) == as.numeric(d$Species)
f
ifelse(f > .5, 1, 0)
ifelse(f > .5, 1, 0) == as.numeric(d$Species)-1
as.numeric(d$Species)-1
as.numeric(d$Species)-2
ifelse(f > .5, 1, 0) == as.numeric(d$Species)-2
is_correct = ifelse(f > .5, 1, 0) == as.numeric(d$Species)-2
mean(is_correct)
# 예측 값 확인
round(fitted(model)[c(1:5, 51:55)])
mean(predicted.classes == test.data$Species)
is_correct = ifelse(f > .5, 1, 0) == as.numeric(d$Species)-1
mean(is_correct)
is_correct = ifelse(f > .5, 1, 0) == as.numeric(d$Species)-2
mean(is_correct)
ifelse(f > .5, 1, 0)
as.numeric(d$Species)
as.numeric(d$Species)-2
is_correct = (ifelse(f > .5, 1, 0)) == (as.numeric(d$Species)-1)
mean(is_correct)
is_correct = ifelse(f > .5, 1, 0) == as.numeric(d$Species)-2
mean(is_correct)
d %>%
mutate(prob = ifelse(d$Species == "virginica", 1, 0)) %>%
ggplot(aes(Petal.Length, prob)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(
title = "Logistic Regression Model",
x = "Petal.Length",
y = "Probability of being versicolor"
)
unique(d$Species)
unique(as.numeric(d$Species))
as.numeric(d$Species)
as.numeric(d$Species)-2
model
unique(data$Species)
predicted.classes <- ifelse(pred > 0.5, "virginica", "versicolor")
head(predicted.classes)
mean(predicted.classes == test.data$Species)
?xtabs
rm(list=ls())
library(ggplot2)
library(reshape2)
library(ggplot2)
library(reshape2)
library(foreign)
library(nnet)
m1 = read.dta("https://stats.idre.ucla.edu/stat/data/hsbdeom.dta")
m1 = read.dta("https://stats.idre.ucla.edu/stat/data/hsbdemo.dta")
View(m1)
str(m1)
levels(m1$honors)
glm(ses ~ read + write + math + science + socst, data = m1, family = "binomial")
model = glm(ses ~ read + write + math + science + socst, data = m1, family = "binomial")
summary(model)
model = glm(ses ~ female + schtyp + read + write + math + science + socst, data = m1, family = "binomial")
model2 = glm(ses ~ female + schtyp + read + write + math + science + socst, data = m1, family = "binomial")
summary(model2)
require("randomForest")
install.packages("randomForest")
library(randomForest)
rf = randomForest(Speices ~ ., data = iris)
data = iris
rf = randomForest(Species ~ ., data = iris)
summary(rf)
plot(rf)
barplot(rf)
rf
rf$importance
barh(rf$importance)
barplot(rf$importance)
plot(rf$importance)
rf$importance
temp = rf$importance
View(temp)
rownames(temp)
barplot(temp, rownames(temp))
temp
library(ggplot2)
df = data.frame(name = rownames(rf$importance),
value = rf$importance)
df
ggplot(data = temp, aes(name, MeanDecreaseGini)) +
geom_bar(stat = "identity")
rf$importance
rf$importance[1]
rf$importance[1:4]
df = data.frame(name = rownames(rf$importance),
value = rf$importance[1:4])
df
ggplot(data = temp, aes(name, MeanDecreaseGini)) +
geom_bar(stat = "identity")
ggplot(data = df, aes(name, MeanDecreaseGini)) +
geom_bar(stat = "identity")
ggplot(data = df, aes(name, value)) +
geom_bar(stat = "identity")
sort(df$value)
library(dplyr)
df = df %>% sort(desc(value))
df
rf2 = randomForest(Species ~ ., data = iris, importance = T)
rf2
importance(rf2)
varImpPlot(rf2)
varImpPlot(rf2, main = "varImpPlot of Iris")
?expand.grid
install.packages('expand.grid')
library(knitr)
knitr("test.Rmd")
knit("test.Rmd")
knit("Project_Report.Rmd")
knit("Project_Report.Rmd")
setwd("C:/Multicampus_semi/Working/project_report")
knit("Project_Report.Rmd")
