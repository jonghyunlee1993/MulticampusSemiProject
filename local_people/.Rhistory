temp = df[df$집계구 == depart_data$code[idx], c(group, 20, 21)]
temp$IsDustyDay = as.factor(temp$IsDustyDay)
temp$IsRainy = as.factor(temp$IsRainy)
print(paste(depart_data[idx, 1], names(df)[group]))
with(temp, interaction.plot(IsDustyDay, IsRainy, temp[[1]], fun = mean,
main = paste(depart_data[idx, 1], names(df)[group])))
Sys.sleep(5)
}
}
depart_list
for (idx in 8:nrow(depart_data)){
for (group in 3:18){
temp = df[df$집계구 == depart_data$code[idx], c(group, 20, 21)]
temp$IsDustyDay = as.factor(temp$IsDustyDay)
temp$IsRainy = as.factor(temp$IsRainy)
print(paste(depart_data[idx, 1], names(df)[group]))
with(temp, interaction.plot(IsDustyDay, IsRainy, temp[[1]], fun = mean,
main = paste(depart_data[idx, 1], names(df)[group])))
Sys.sleep(5)
}
}
depart_data
depart_data$code[idx]
depart_data
df$집계구 == depart_data$code[idx]
for (idx in 10:nrow(depart_data)){
for (group in 3:18){
temp = df[df$집계구 == depart_data$code[idx], c(group, 20, 21)]
temp$IsDustyDay = as.factor(temp$IsDustyDay)
temp$IsRainy = as.factor(temp$IsRainy)
print(paste(depart_data[idx, 1], names(df)[group]))
with(temp, interaction.plot(IsDustyDay, IsRainy, temp[[1]], fun = mean,
main = paste(depart_data[idx, 1], names(df)[group])))
Sys.sleep(5)
}
}
dir(())
dir(
)
head(read.csv("visit_pop_year_by.csv"))
my_visit_data = read.csv("visit_pop_year_by.csv")
df2 = my_visit_data[, c(2,3,4)]
df2 = inner_join(df2, wd, by = "date")
df2$date = as.character(df2$date)
df2 = inner_join(df2, wd, by = "date")
View(df2)
barplot(mean_visit_pop ~ IsDustyDay, data = df2)
df$IsDustyDay = as.factor(df$IsDustyDay)
barplot(mean_visit_pop ~ IsDustyDay, data = df2)
df2$IsDustyDay = as.factor(df2$IsDustyDay)
boxplot(mean_visit_pop ~ IsDustyDay, data = df2)
clean = df2[df2$IsDustyDay == 0, ]$mean_visit_pop
dusty = df2[df2$IsDustyDay == 1, ]$mean_visit_pop
t.test(clean, dusty)
clean = df2[df2$IsRainy == 0, ]$mean_visit_pop
dusty = df2[df2$IsRainy == 1, ]$mean_visit_pop
t.test(clean, dusty)
head(temp)
temp[[1]]
for (idx in 1:nrow(depart_data)){
for (group in 3:18){
temp = df[df$집계구 == depart_data$code[idx], c(group, 20, 21)]
temp$IsDustyDay = as.factor(temp$IsDustyDay)
temp$IsRainy = as.factor(temp$IsRainy)
print(paste(depart_data[idx, 1], names(df)[group]))
# with(temp, interaction.plot(IsDustyDay, IsRainy, temp[[1]], fun = mean,
#                             main = paste(depart_data[idx, 1], names(df)[group])))
model = lm(temp[[1]] ~ temp$IsDustyDay + temp$IsRainy, data = temp)
print(summary(model))
Sys.sleep(5)
}
}
idx
for (idx in 10:nrow(depart_data)){
for (group in 3:18){
temp = df[df$집계구 == depart_data$code[idx], c(group, 20, 21)]
temp$IsDustyDay = as.factor(temp$IsDustyDay)
temp$IsRainy = as.factor(temp$IsRainy)
print(paste(depart_data[idx, 1], names(df)[group]))
# with(temp, interaction.plot(IsDustyDay, IsRainy, temp[[1]], fun = mean,
#                             main = paste(depart_data[idx, 1], names(df)[group])))
model = lm(temp[[1]] ~ temp$IsDustyDay + temp$IsRainy, data = temp)
print(summary(model))
Sys.sleep(5)
}
}
for (idx in 10:nrow(depart_data)){
for (group in 3:18){
temp = df[df$집계구 == depart_data$code[idx], c(group, 20, 21)]
temp$IsDustyDay = as.factor(temp$IsDustyDay)
temp$IsRainy = as.factor(temp$IsRainy)
print(paste(depart_data[idx, 1], names(df)[group]))
# with(temp, interaction.plot(IsDustyDay, IsRainy, temp[[1]], fun = mean,
#                             main = paste(depart_data[idx, 1], names(df)[group])))
model = lm(temp[[1]] ~ temp$IsDustyDay + temp$IsRainy, data = temp)
print(summary(model))
Sys.sleep(5)
}
}
for (idx in 1:nrow(depart_data)){
for (group in 3:18){
temp = df[df$집계구 == depart_data$code[idx], c(group, 20, 21)]
temp$IsDustyDay = as.factor(temp$IsDustyDay)
temp$IsRainy = as.factor(temp$IsRainy)
print(paste(depart_data[idx, 1], names(df)[group]))
# with(temp, interaction.plot(IsDustyDay, IsRainy, temp[[1]], fun = mean,
#                             main = paste(depart_data[idx, 1], names(df)[group])))
model = lm(temp[[1]] ~ temp$IsDustyDay + temp$IsRainy, data = temp)
print(summary(model))
Sys.sleep(5)
}
}
for (idx in 2:nrow(depart_data)){
for (group in 3:18){
temp = df[df$집계구 == depart_data$code[idx], c(group, 20, 21)]
temp$IsDustyDay = as.factor(temp$IsDustyDay)
temp$IsRainy = as.factor(temp$IsRainy)
print(paste(depart_data[idx, 1], names(df)[group]))
# with(temp, interaction.plot(IsDustyDay, IsRainy, temp[[1]], fun = mean,
#                             main = paste(depart_data[idx, 1], names(df)[group])))
model = lm(temp[[1]] ~ temp$IsDustyDay + temp$IsRainy, data = temp)
print(summary(model))
Sys.sleep(5)
}
}
plot(model)
plot(model)
View(my_visit_data)
my_visit_data = read.csv("visit_pop_year_by.csv")[, c(2,3,4)]
View(my_visit_data)
df2 = my_visit_data
df2$date = as.character(df2$date)
df2 = inner_join(df2, wd, by = "date")
df2$IsDustyDay = as.factor(df2$IsDustyDay)
df2$IsRainy = as.factor(df2$IsRainy)
View(df2)
depart_data[1, ]
depart_data[, 2]
df2[df2$집계구 == depart, ]
depart = depart_data[1,2]
depart
temp = df2[df2$집계구 == depart, ]
head(temp)
print(depart_data[depart_data$code == depart]$name)
depart_data[depart_data$code == depart]
depart_data[depart_data$code == depart, ]$name
for (depart in depart_data[, 2]){
temp = df2[df2$집계구 == depart, ]
model = lm(temp$mean_visit_pop ~ IsDustyDay + IsRainy, data = temp)
print(depart_data[depart_data$code == depart, ]$name)
print(summary(model))
}
temp
df2[df2$집계구 == depart, ]
df2$집계구
depart
df2$집계구 == depart
sum(df2$집계구 == depart)
View(depart_list)
View(depart_data)
depart_data = depart_data[-9,]
for (depart in depart_data[, 2]){
temp = df2[df2$집계구 == depart, ]
model = lm(temp$mean_visit_pop ~ IsDustyDay + IsRainy, data = temp)
print(depart_data[depart_data$code == depart, ]$name)
print(summary(model))
}
rm(list = ls())
setwd("~/GitRepo/Multicampus_semi/data_proced/")
depart_data = read.csv("final_department.csv")
weather_dust_data = read.csv("weather_dust_weekend_final.csv")
depart_data[,1]
# visit_pop = visit_pop_data[, c(2,3,7)]
wd = weather_dust_data[, c(3, 20, 21)]
wd$date = as.character(wd$date)
wd$IsRainy[is.na(wd$IsRainy)] = 0
df = inner_join(visit_pop, wd, by = 'date')
df
library(dplyr)
df = inner_join(visit_pop, wd, by = 'date')
getwd()
# visit_pop_data = read.csv("visit_pop_age_by.csv")
load("~/GitRepo/Multicampus_semi/local_people/weekend.Rdata")
my_visit_data = read.csv("visit_pop_year_by.csv")[, c(2,3,4)]
df2 = my_visit_data
df2$date = as.character(df2$date)
df2 = inner_join(df2, wd, by = "date")
df2$IsDustyDay = as.factor(df2$IsDustyDay)
df2$IsRainy = as.factor(df2$IsRainy)
for (depart in depart_data[, 2]){
temp = df2[df2$집계구 == depart, ]
model = lm(temp$mean_visit_pop ~ IsDustyDay + IsRainy, data = temp)
print(depart_data[depart_data$code == depart, ]$name)
print(summary(model))
}
depart
for (depart in depart_data[, 2]){
temp = df2[df2$집계구 == depart, ]
model = lm(temp$mean_visit_pop ~ IsDustyDay + IsRainy, data = temp)
print(depart_data[depart_data$code == depart, ]$name)
print(summary(model))
}
setwd("~/GitRepo/Multicampus_semi/address")
department = read.csv("/OLD/점포이름_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
department = read.csv("./OLD/점포이름_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
head(department)
library(rgdal)
library(ggplot2)
my_spdf <- readOGR(
dsn= paste0("../map/") ,
layer="seoul"
)
# 한국 중부 좌표계
# from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=GRS80 +units=m +no_defs")
from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m")
# 세계 표준 좌표계
to_crs = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
proj4string(my_spdf) = from_crs
converted = spTransform(my_spdf, to_crs)
library(broom)
shp_df = tidy(converted)
district_data = aggregate(cbind(long, lat) ~ id, data = shp_df, FUN = mean)
district_data = cbind(TOT_REG_CD = converted$TOT_REG_CD, district_data)
# Plot it
fig = ggplot() +
geom_polygon(data = my_spdf, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void() + geom_point(aes(x,y))
fig
head(converted)
ggplot() +
geom_polygon(data = converted, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white")
department$str_comp = substr(department$name, 1, 2)
department$str_comp = as.factor(department$str_comp)
department = department %>% mutate(comp = ifelse(substr(name, 1, 2) == "신세", 1,
ifelse(substr(name, 1, 2) == "현대", 2, 3)))
ggplot() +
geom_polygon(data = converted, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department, aes(lon, lat, colour = str_comp)) +
ggtitle("서울시 집계구 경계 및 백화점 위치")
rm(list = ls())
setwd("~/GitRepo/Multicampus_semi/address")
header_data = read.csv("집계코드_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
options("scipen" = 100)
header = header_data[,2]
head(header_data)
department = read.csv("./OLD/점포이름_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
head(department)
library(rgdal)
library(ggplot2)
my_spdf <- readOGR(
dsn= paste0("../map/") ,
layer="seoul"
)
# 한국 중부 좌표계
# from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=GRS80 +units=m +no_defs")
from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m")
# 세계 표준 좌표계
to_crs = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
proj4string(my_spdf) = from_crs
converted = spTransform(my_spdf, to_crs)
library(broom)
shp_df = tidy(converted)
district_data = aggregate(cbind(long, lat) ~ id, data = shp_df, FUN = mean)
district_data = cbind(TOT_REG_CD = converted$TOT_REG_CD, district_data)
library(geosphere)
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)[1,1]
return(dist)
}
res = matrix(rep(0, length(district_data$TOT_REG_CD) * length(department$name)), nrow = length(department$name))
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
# if (depart * addr %% 5000 == 1)
# {
#   cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%\n")
# }
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
res = t(res)
write.csv(res, "distance_matrix_with_shp.csv")
my_mat = NULL
for (dept in 1:ncol(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
colnames(my_mat) = rep(as.character(department$name), each = 2)
View(my_mat)
depart = 4
target = header_data[header_data[,2] %in% my_mat[, (depart * 2 - 1)], 2]
header_data = read.csv("./OLD/집계코드_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
options("scipen" = 100)
header = header_data[,2]
head(header_data)
my_mat = NULL
for (dept in 1:ncol(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
colnames(my_mat) = rep(as.character(department$name), each = 2)
View(my_mat)
target = header_data[header_data[,2] %in% my_mat[, (depart * 2 - 1)], 2]
target_coord = subset(converted, TOT_REG_CD %in% target)
target_df = broom::tidy(target_coord)
cname = aggregate(cbind(long, lat) ~ id, data = target_df, FUN = mean)
label_data = cbind(cname, target_coord@data)
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
depart = 4
depart = 6
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
depart = 9
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
# 한국 중부 좌표계
from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=GRS80 +units=m +no_defs")
# from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m")
# 세계 표준 좌표계
to_crs = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
proj4string(my_spdf) = from_crs
converted = spTransform(my_spdf, to_crs)
my_mat = NULL
for (dept in 1:ncol(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
colnames(my_mat) = rep(as.character(department$name), each = 2)
View(my_mat)
target = header_data[header_data[,2] %in% my_mat[, (depart * 2 - 1)], 2]
target_coord = subset(converted, TOT_REG_CD %in% target)
target_df = broom::tidy(target_coord)
cname = aggregate(cbind(long, lat) ~ id, data = target_df, FUN = mean)
label_data = cbind(cname, target_coord@data)
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
# 한국 중부 좌표계
# from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=GRS80 +units=m +no_defs")
from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m")
converted = spTransform(my_spdf, to_crs)
proj4string(my_spdf) = from_crs
converted = spTransform(my_spdf, to_crs)
depart = 15
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
rm(converted)
# 한국 중부 좌표계
# from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=GRS80 +units=m +no_defs")
from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m")
# 세계 표준 좌표계
to_crs = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
proj4string(my_spdf) = from_crs
converted = spTransform(my_spdf, to_crs)
library(broom)
shp_df = tidy(converted)
district_data = aggregate(cbind(long, lat) ~ id, data = shp_df, FUN = mean)
district_data = cbind(TOT_REG_CD = converted$TOT_REG_CD, district_data)
my_mat = NULL
for (dept in 1:ncol(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
colnames(my_mat) = rep(as.character(department$name), each = 2)
View(my_mat)
target = header_data[header_data[,2] %in% my_mat[, (depart * 2 - 1)], 2]
target_coord = subset(converted, TOT_REG_CD %in% target)
target_df = broom::tidy(target_coord)
cname = aggregate(cbind(long, lat) ~ id, data = target_df, FUN = mean)
label_data = cbind(cname, target_coord@data)
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
depart = 16
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
depart = 7
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45)
rm(list = ls())
setwd("~/GitRepo/Multicampus_semi/data_proced/")
depart_data = read.csv("final_department.csv")
weather_dust_data = read.csv("weather_dust_weekend_final.csv")
# visit_pop_data = read.csv("visit_pop_age_by.csv")
load("~/GitRepo/Multicampus_semi/local_people/weekend.Rdata")
depart_data[,1]
# visit_pop = visit_pop_data[, c(2,3,7)]
wd = weather_dust_data[, c(3, 20, 21)]
wd$date = as.character(wd$date)
wd$IsRainy[is.na(wd$IsRainy)] = 0
library(dplyr)
df = inner_join(visit_pop, wd, by = 'date')
my_visit_data = read.csv("visit_pop_year_by.csv")[, c(2,3,4)]
df2 = my_visit_data
df2$date = as.character(df2$date)
df2 = inner_join(df2, wd, by = "date")
df2$IsDustyDay = as.factor(df2$IsDustyDay)
df2$IsRainy = as.factor(df2$IsRainy)
for (depart in depart_data[, 2]){
temp = df2[df2$집계구 == depart, ]
model = lm(temp$mean_visit_pop ~ IsDustyDay + IsRainy, data = temp)
print(depart_data[depart_data$code == depart, ]$name)
print(summary(model))
}
rm(list = ls())
setwd("~/GitRepo/Multicampus_semi/local_people/")
options(scipen = 100)
load_data = function(fname){
load(fname)
return(res)
}
weekday = load_data("weekday.Rdata")
weekend = load_data("weekend.Rdata")
library(dplyr)
get_resid_pop_year = function(){
res = weekday %>% mutate(year = substr(date, 1,4)) %>%
group_by(year, 집계구) %>%  summarize(mean_resid_pop = mean(총생활인구, trim = 10))
return(res)
}
resid_pop = get_resid_pop_year()
get_visit_pop_day = function(){
res = weekend %>% group_by(date, 집계구) %>%
summarize(mean_visit_pop = mean(총생활인구))
return(res)
}
visit_pop = get_visit_pop_day()
visit_pop = visit_pop %>% mutate(year = substr(date, 1, 4))
visit_pop = left_join(visit_pop, resid_pop, by=c("year", "집계구"))
visit_pop$cleaned_pop = visit_pop$mean_visit_pop - visit_pop$mean_resid_pop
depart_list = unique(visit_pop$집계구)
temp = visit_pop[visit_pop$집계구 == depart_list[1], ]
head(temp)
plot(temp$date, temp$mean_visit_pop)
abline(h = mean(temp$mean_visit_pop))
abline(v = c(which(temp$date == 20180106), which(temp$date == 20190105)))
strange_parts = c("1113075030009", "1115051010002", "1123051010203",
"1123058040001", "1123063020012", "1125073030007")
for (strange in strange_parts){
ttt = weekday %>% mutate(year = substr(date, 1, 4)) %>%
group_by(year, 집계구) %>% filter(집계구 == strange)
barplot(ttt$총생활인구)
title(strange)
invisible(readline(prompt="Press [enter] to continue"))
}
