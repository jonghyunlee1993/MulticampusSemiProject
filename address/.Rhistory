geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void() +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void() +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
suppressPackageStartupMessages({
library(ggplot2)
library(ggthemes)
library(extrafont)
})
install.packages(c("ggthemes", "extrafont"))
suppressPackageStartupMessages({
library(ggplot2)
library(ggthemes)
library(extrafont)
})
?theme_void
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void(base_family='NanumGothic')) +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_set(theme_void(base_family='NanumGothic'))) +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void(base_family='Malgun Gothic')) +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
font_import()
font_import()
theme_set(theme_void(base_family='AppleMyungjo'))
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void() +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
theme_set(theme_gray(base_family='AppleMyungjo'))
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray() +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void() +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray() +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
?them_gray
?theme_gray
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
for (depart in 1:nrow(department)){
target = header_data[header_data[,2] %in% my_mat[, (depart * 2 - 1)], 2]
# target_coord = my_spdf[as.integer(my_spdf@data[, "TOT_REG_CD"]) == target, ]
# plot(target_coord)
target_coord = subset(converted, TOT_REG_CD %in% target)
target_df = broom::tidy(target_coord)
cname = aggregate(cbind(long, lat) ~ id, data = target_df, FUN = mean)
label_data = cbind(cname, target_coord@data)
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
invisible(readline(prompt="Press [enter] to continue"))
}
View(converted)
temp = tidy(converted)
library(broom)
temp = tidy(converted)
View(temp)
cname = aggregate(cbind(long, lat) ~ id, data = target_df, FUN = mean)
View(cname)
cname = aggregate(cbind(long, lat) ~ id, data = temp, FUN = mean)
View(cname)
plot(cname)
ggplot(data = cname, aes(x = long, y = lat))
ggplot(data = cname, aes(x = long, y = lat)) + geom_point()
rm(list = ls())
source('~/.active-rstudio-document', echo=TRUE)
shp_df = tidy(converted)
district_data = aggregate(cbind(long, lat) ~ id, data = shp_df, FUN = mean)
View(district_data)
nrow(converted$TOT_REG_CD)
length(converted$TOT_REG_CD)
district_data = cbind(converted$TOT_REG_CD, district_data)
View(district_data)
district_data = cbind(TOT_REG_CD = converted$TOT_REG_CD, district_data)
View(district_data)
district_data = aggregate(cbind(long, lat) ~ id, data = shp_df, FUN = mean)
district_data = cbind(TOT_REG_CD = converted$TOT_REG_CD, district_data)
View(district_data)
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department$X))
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)[1,1]
return(dist)
}
str(district_data)
department
res = matrix(rep(0, length(district_data$TOT_REG_CD) * length(department$name)), nrow = length(department$name))
res
department
str(district_data)
for (depart in 1:length(department$name)){
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (length(district_data$TOT_REG_CD) * length(department$name) %% 100 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
library(geosphere)
install.packages("geosphere")
library(geosphere)
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (length(district_data$TOT_REG_CD) * length(department$name) %% 100 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
res = matrix(rep(0, length(district_data$TOT_REG_CD) * length(department$name)), nrow = length(department$name))
data = read.csv("distance_matrix.csv")
data = data[-1]
data
rm(list = ls())
setwd("~/GitRepo/Multicampus_semi/address")
header_data = read.csv("집계코드_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
options("scipen" = 100)
header = header_data[,2]
head(header_data)
department = read.csv("점포이름_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
head(department)
library(rgdal)
library(ggplot2)
my_spdf <- readOGR(
dsn= paste0("../map/") ,
layer="seoul"
)
# 한국 중부 좌표계
from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m")
# 세계 표준 좌표계
to_crs = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
proj4string(my_spdf) = from_crs
converted = spTransform(my_spdf, to_crs)
library(broom)
shp_df = tidy(converted)
district_data = aggregate(cbind(long, lat) ~ id, data = shp_df, FUN = mean)
district_data = cbind(TOT_REG_CD = converted$TOT_REG_CD, district_data)
library(geosphere)
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)[1,1]
return(dist)
}
res = matrix(rep(0, length(district_data$TOT_REG_CD) * length(department$name)), nrow = length(department$name))
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (length(district_data$TOT_REG_CD) * length(department$name) %% 100 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
View(res)
res = T(res)
res = t(res)
dim(res)
write.csv(res, "distance_matrix_with_shp.csv")
getwd()
rm(list = ls())
res = read.csv("distance_matrix_with_shp.csv")
department = read.csv("점포이름_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
my_mat = NULL
for (dept in 1:length(data)){
dat = data[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat), 20))
}
source('~/GitRepo/Multicampus_semi/address/nearest_distric_finder_final_by_JH.R', echo=TRUE)
my_mat = NULL
data
length(res)
res = read.csv("distance_matrix_with_shp.csv")
length(res)
nrow(res)
header
my_mat = NULL
for (dept in 1:nrow(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat), 5))
}
header
idx
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
my_mat
header[idx]
head(header[idx]
)
head(sort(dat))
my_mat = NULL
for (dept in 1:nrow(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
res
my_mat = NULL
for (dept in 1:length(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
colnames(my_mat) = rep(as.character(department$name), each = 2)
View(my_mat)
my_mat = NULL
for (dept in 2:length(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
colnames(my_mat) = rep(as.character(department$name), each = 2)
View(my_mat)
department
nrow(department)
header_data
depart = 1
my_mat[, (depart * 2 - 1)]
target = header_data[header_data[,2] %in% my_mat[, (depart * 2 - 1)], 2]
target_coord = subset(converted, TOT_REG_CD %in% target)
header_data = read.csv("집계코드_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
options("scipen" = 100)
header = header_data[,2]
head(header_data)
department = read.csv("점포이름_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
head(department)
library(rgdal)
library(ggplot2)
my_spdf <- readOGR(
dsn= paste0("../map/") ,
layer="seoul"
)
# 한국 중부 좌표계
from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m")
# 세계 표준 좌표계
to_crs = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
proj4string(my_spdf) = from_crs
converted = spTransform(my_spdf, to_crs)
target_df = broom::tidy(target_coord)
target_coord = subset(converted, TOT_REG_CD %in% target)
target_df = broom::tidy(target_coord)
cname = aggregate(cbind(long, lat) ~ id, data = target_df, FUN = mean)
label_data = cbind(cname, target_coord@data)
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
converted
target
target_df
cname
label_data
ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white")
department
department[depart,]
ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") + geom_point(data = department[depart, ], aes(lon, lat))
department[depart,]
dept = 2
dat = res[,dept]
View(dat)
idx = order(dat)
temp = c(dat, idx)
View(temp)
temp = cbind(dat, idx)
View(temp)
View(temp[idx])
header[idx]
temp[idx]
sort(dat)
my_mat
for (depart in 1:nrow(department)){
target = header_data[header_data[,2] %in% my_mat[, (depart * 2 - 1)], 2]
# target_coord = my_spdf[as.integer(my_spdf@data[, "TOT_REG_CD"]) == target, ]
# plot(target_coord)
target_coord = subset(converted, TOT_REG_CD %in% target)
target_df = broom::tidy(target_coord)
cname = aggregate(cbind(long, lat) ~ id, data = target_df, FUN = mean)
label_data = cbind(cname, target_coord@data)
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
invisible(readline(prompt="Press [enter] to continue"))
}
# 한국 중부 좌표계
from_crs = CRS("EPSG:5181 +proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=GRS80 +units=m +no_defs")
# 한국 중부 좌표계
from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=GRS80 +units=m +no_defs")
# from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m")
# 세계 표준 좌표계
to_crs = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
proj4string(my_spdf) = from_crs
converted = spTransform(my_spdf, to_crs)
library(broom)
shp_df = tidy(converted)
district_data = aggregate(cbind(long, lat) ~ id, data = shp_df, FUN = mean)
district_data = cbind(TOT_REG_CD = converted$TOT_REG_CD, district_data)
library(geosphere)
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)[1,1]
return(dist)
}
res = matrix(rep(0, length(district_data$TOT_REG_CD) * length(department$name)), nrow = length(department$name))
length(district_data$TOT_REG_CD) * length(department$name)
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (deprt %% 100 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 100 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 1000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 10000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 100000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 1000000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 5000000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
length(depart$name)
length(department$name)
length(district_data$TOT_REG_CD) * 25
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart * addr %% 1000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart * addr %% 5000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%\n")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
res = t(res)
write.csv(res, "distance_matrix_with_shp.csv")
my_mat = NULL
for (dept in 2:length(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
length(res)
View(res)
length(district_data$TOT_REG_CD)
dim(res)
length(res)
ncol(res)
my_mat = NULL
for (dept in 1:ncol(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
colnames(my_mat) = rep(as.character(department$name), each = 2)
View(my_mat)
rm(list = ls())
