header[2,1]
header[1,2]
header = read.csv("집계코드_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
header[1,2]
rm(header)
header = read.csv("집계코드_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
View(header)
options("scipen"=100)
View(header)
options("scipen" 100)
options("scipen" = 100)
header(2)
header(,2)
header[,2]
sort(dat)
order(dat)
sort(order(dat))
idx = order(dat)
View(header)
rm(list = ls())
data = read.csv("distance_matrix.csv")
data = data[-1]
header_data = read.csv("집계코드_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
options("scipen" = 100)
header = header_data[,2]
# my_mat = matrix(rep(0,length(data)*5), nrow=5)
my_mat = NULL
dept=1
dat = data[,dept]
dat[dat == 0] = NA
idx = order(dat)
header[idx]
header[1]
idx[1]
header[idx == 1]
head(sort(dat))
header[sort(idx)]
head(header[sort(idx)])
idx = order(dat)
idx
head(sort(dat))
head(header[idx])
head(header[idx])
for (dept in 1:length(data)){
dat = data[,dept]
dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
print(my_mat[,dept])
}
my_mat
View(my_mat)
my_mat[1,1]
header_data[header == my_mat]
header == my_mat
header == my_mat[1,1]
header == my_mat[1,1]
header_data[header == my_mat[1,1]]
header[header_data == my_mat[1,1],1]
dim(header)
dim(header_data)
header_data[header_data == my_mat[1,1],1]
header_data == my_mat[1,1]
header_data[,1] == my_mat[1,1]
header_data[header_data[,1] == my_mat[1,1],1]
sum(header_data[,1] == my_mat[1,1])
my_mat[1,1]
sum(header_data[,2] == my_mat[1,1])
header_data[header_data[,2] == my_mat[1,1],1]
header_data[header_data[,2] == my_mat[1,1],3]
header_data[header_data[,2] == my_mat[1,1],4]
header_data[header_data[,2] == my_mat[1,1],3]
header_data[header_data[,2] == my_mat[1,1],4]
x = header_data[header_data[,2] == my_mat[1,1],3]
y = header_data[header_data[,2] == my_mat[1,1],4]
plot(x,y)
department = read.csv("백화점주소_2019년.csv")
department = read.csv("백화점주소_2019년.csv", fileEncoding = "CP949", encoding = "euc-kr")
View(department)
department = read.csv("점포이름_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
View(deparse())
View(department
)
install.packages("rgdal")
library(rgdal)
library(rgdal)
library(ggplot2)
getwd()
my_spdf <- readOGR(
dsn= paste0("../map/") ,
layer="seoul",
verbose=FALSE
)
install.packages("broom")
# 'fortify' the data to get a dataframe format required by ggplot2
library(broom)
spdf_fortified <- tidy(my_spdf, region = "NAME")
View(my_spdf)
# Plot it
ggplot() +
geom_polygon(data = spdf_fortified, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void()
# Plot it
ggplot() +
geom_polygon(data = my_spdf, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void()
plot(my_spdf, col="#f2f2f2", bg="skyblue", lwd=0.25, border=0 )
?geom_point
fig + geom_point(aes(x,y))
# Plot it
fig = ggplot() +
geom_polygon(data = my_spdf, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void()
plot(my_spdf, col="#f2f2f2", bg="skyblue", lwd=0.25, border=0 )
plot(my_spdf, col="#f2f2f2", bg="skyblue", border=0 )
# Plot it
fig = ggplot() +
geom_polygon(data = my_spdf, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void() + geom_point(aes(x,y))
fig
ggplot() +
geom_polygon(data = my_spdf, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void()
x
y
header_data[,2] == my_mat[1,1]
header_data[header_data[,2] == my_mat[1,1],2]
header_data[header_data[,2] == my_mat[1,1], 2]
target = header_data[header_data[,2] == my_mat[1,1], 2]
my_spdf
my_spdf[1]
my_spdf[2]
View(my_spdf[1])
View(my_spdf[2])
head(my_spdf@data)
head(my_spdf@data[0])
head(my_spdf@data[1])
head(my_spdf@data[,1])
head(my_spdf@data)
my_spdf@data[, "TOT_REG_CD" == my_mat[1,1]]
my_spdf@data[, int("TOT_REG_CD") == my_mat[1,1]]
my_spdf@data[, as.int("TOT_REG_CD") == my_mat[1,1]]
my_spdf@data[, as.integer("TOT_REG_CD") == my_mat[1,1]]
my_spdf@data[, "TOT_REG_CD"]
as.integer(my_spdf@data[, "TOT_REG_CD"])
as.integer(my_spdf@data[, "TOT_REG_CD"]) == my_mat[1,1]
my_spdf[,as.integer(my_spdf@data[, "TOT_REG_CD"]) == my_mat[1,1]]
my_coord = my_spdf[,as.integer(my_spdf@data[, "TOT_REG_CD"]) == my_mat[1,1]]
plot(my_coord, col="#f2f2f2", bg="skyblue", border=0 )
as.integer(my_spdf@data[, "TOT_REG_CD"]) == my_mat[1,1]
sum(as.integer(my_spdf@data[, "TOT_REG_CD"]) == my_mat[1,1])
temp <- copy(my_spdf[my_spdf@data$TOT_REG_CD==my_map[1,1],])
temp <- my_spdf[my_spdf@data$TOT_REG_CD==my_map[1,1],]
temp <- my_spdf[my_spdf@data$TOT_REG_CD==my_mat[1,1],]
temp
plot(temp)
ggplot() + geom_polygon(data = temp, aes(x = long, y = lat, group = group)) +
theme_void() + geom_point(aes(x,y))
ggplot() + geom_polygon(data = temp, aes(x = long, y = lat, group = group))
ggplot() +
geom_polygon(data = temp, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white")
x = depart[header_data[,2] == my_mat[1,1],3]
department[header_data[,2] == my_mat[1,1],3]
View(department)
department[header_data[,2] == my_mat[1,1]]
x = department[header_data[,2] == my_mat[1,1], 3]
department[header_data[,2] == my_mat[1,1], 3]
department[1]$lon
department$lon
department$lon[1]
x = department$lon[1]
y = department$lat[1]
ggplot() +
geom_polygon(data = temp, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
geom_point(x,y)
ggplot() +
geom_polygon(data = temp, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
geom_point(aes(x,y))
ggplot() +
geom_polygon(data = my_spdf, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void()
ggplot() +
geom_polygon(data = temp, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white")
View(temp)
depart = departemnt[1,]
departemnt
depart = department[1,]
departe
depart
ggplot() +
geom_polygon(data = temp, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
geom_point(data = depart, aes(x = lon, y = lat))
ggplot()+
geom_point(department, aes(lon, lat))
ggplot()+
geom_point(data = department, aes(lon, lat))
?spTransform
shapefile <- spTransform(my_spdf, CRS("+proj=longlat +datum=WGS84")) #change CRS
library(rgdal)
plot(my_spdf, col="#f2f2f2", bg="skyblue", border=0 )
shapefile <- spTransform(my_spdf, CRS("+proj=longlat +datum=WGS84")) #change CRS
proj4string(my_spdf) <- CRS("+proj=longlat +datum=WGS84")
proj4string(my_spdf)
proj4string(my_spdf) <- CRS("+proj=longlat +ellps=WGS84")
>>>>>>> 8b99fc3134cfccaa2aaa6592d905c5cd1e147ee1
=======
res = matrix(rep(0, length(district_data$TOT_REG_CD) * length(department$name)), nrow = length(department$name))
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (length(district_data$TOT_REG_CD) * length(department$name) %% 100 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
View(res)
res = T(res)
res = t(res)
dim(res)
write.csv(res, "distance_matrix_with_shp.csv")
getwd()
rm(list = ls())
res = read.csv("distance_matrix_with_shp.csv")
department = read.csv("점포이름_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
my_mat = NULL
for (dept in 1:length(data)){
dat = data[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat), 20))
}
source('~/GitRepo/Multicampus_semi/address/nearest_distric_finder_final_by_JH.R', echo=TRUE)
my_mat = NULL
data
length(res)
res = read.csv("distance_matrix_with_shp.csv")
length(res)
nrow(res)
header
my_mat = NULL
for (dept in 1:nrow(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat), 5))
}
header
idx
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
my_mat
header[idx]
head(header[idx]
)
head(sort(dat))
my_mat = NULL
for (dept in 1:nrow(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
res
my_mat = NULL
for (dept in 1:length(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
colnames(my_mat) = rep(as.character(department$name), each = 2)
View(my_mat)
my_mat = NULL
for (dept in 2:length(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
colnames(my_mat) = rep(as.character(department$name), each = 2)
View(my_mat)
department
nrow(department)
header_data
depart = 1
my_mat[, (depart * 2 - 1)]
target = header_data[header_data[,2] %in% my_mat[, (depart * 2 - 1)], 2]
target_coord = subset(converted, TOT_REG_CD %in% target)
header_data = read.csv("집계코드_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
options("scipen" = 100)
header = header_data[,2]
head(header_data)
department = read.csv("점포이름_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
head(department)
library(rgdal)
library(ggplot2)
my_spdf <- readOGR(
dsn= paste0("../map/") ,
layer="seoul"
)
# 한국 중부 좌표계
from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m")
# 세계 표준 좌표계
to_crs = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
proj4string(my_spdf) = from_crs
converted = spTransform(my_spdf, to_crs)
target_df = broom::tidy(target_coord)
target_coord = subset(converted, TOT_REG_CD %in% target)
target_df = broom::tidy(target_coord)
cname = aggregate(cbind(long, lat) ~ id, data = target_df, FUN = mean)
label_data = cbind(cname, target_coord@data)
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
converted
target
target_df
cname
label_data
ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white")
department
department[depart,]
ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") + geom_point(data = department[depart, ], aes(lon, lat))
department[depart,]
dept = 2
dat = res[,dept]
View(dat)
idx = order(dat)
temp = c(dat, idx)
View(temp)
temp = cbind(dat, idx)
View(temp)
View(temp[idx])
header[idx]
temp[idx]
sort(dat)
my_mat
for (depart in 1:nrow(department)){
target = header_data[header_data[,2] %in% my_mat[, (depart * 2 - 1)], 2]
# target_coord = my_spdf[as.integer(my_spdf@data[, "TOT_REG_CD"]) == target, ]
# plot(target_coord)
target_coord = subset(converted, TOT_REG_CD %in% target)
target_df = broom::tidy(target_coord)
cname = aggregate(cbind(long, lat) ~ id, data = target_df, FUN = mean)
label_data = cbind(cname, target_coord@data)
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
invisible(readline(prompt="Press [enter] to continue"))
}
# 한국 중부 좌표계
from_crs = CRS("EPSG:5181 +proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=GRS80 +units=m +no_defs")
# 한국 중부 좌표계
from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=GRS80 +units=m +no_defs")
# from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m")
# 세계 표준 좌표계
to_crs = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
proj4string(my_spdf) = from_crs
converted = spTransform(my_spdf, to_crs)
library(broom)
shp_df = tidy(converted)
district_data = aggregate(cbind(long, lat) ~ id, data = shp_df, FUN = mean)
district_data = cbind(TOT_REG_CD = converted$TOT_REG_CD, district_data)
library(geosphere)
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)[1,1]
return(dist)
}
res = matrix(rep(0, length(district_data$TOT_REG_CD) * length(department$name)), nrow = length(department$name))
length(district_data$TOT_REG_CD) * length(department$name)
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (deprt %% 100 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 100 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 1000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 10000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 100000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 1000000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 5000000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
length(depart$name)
length(department$name)
length(district_data$TOT_REG_CD) * 25
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart * addr %% 1000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart * addr %% 5000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%\n")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
res = t(res)
write.csv(res, "distance_matrix_with_shp.csv")
my_mat = NULL
for (dept in 2:length(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
length(res)
View(res)
length(district_data$TOT_REG_CD)
dim(res)
length(res)
ncol(res)
my_mat = NULL
for (dept in 1:ncol(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
colnames(my_mat) = rep(as.character(department$name), each = 2)
View(my_mat)
rm(list = ls())
>>>>>>> 04c984f6692c6eafda190f1501963ce2f94ad9da
