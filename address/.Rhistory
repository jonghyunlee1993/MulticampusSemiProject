rownames(french_fries) <- NULL
identical(r, french_fries)
rm(list=ls())
18/49
12/49
df = data.frame(age, gender, income, region)
age = c(20, 30, 40, 50)
gender = c("F", "M", "M", "F")
income = c(1000, 2000, 3000, 4000)
region = c('S', 'S', 'G', "G")
df = data.frame(age, gender, income, region)
library(reshape2)
df_melt = melt(df, id.vars = c(age, gender))
df_melt = melt(df, id.vars = c("gender", "region"))
df_melt
cast(df_melt, gender ~ variable + value)
reshape2::cast(df_melt, gender ~ variable + value)
?melt
?cast
cast(df_melt, gender ~ variable + value)
cast(df.melt, gender ~ variable + region)
dcast(df_melt, gender ~ variable + value)
dcast(df_melt, gender ~ variable + region)
dcast(df_melt, gender ~ region + variable)
dcast(df_melt, gender + region ~ variable)
df_melt
dcast(df_melt, gender + region ~ variable)
?pairs
0/0
lm(mpg~.,data=mtcars)
res = lm(formula = mpg ~ ., data = mtcars)
summary(res)
?tm::stemDocument
rm(list=ls())
data = airquality
data[2]
data['ozone']
data[ozone]
data$Ozone
data['Ozone']
data[['Ozone']]
77 + 55
28 + 67
77 + 55 + 28 + 67
72 + 55 + 28 + 67
222/4
72+55
all = 72 + 55 + 28 + 67
man = 72 + 55
woman = 28 + 67
galaxy = 72 + 28
iphone = 55 + 67
man_glaxy_expect = (man/all + galaxy/all) * all
man_glaxy_expect = ((man/all) * (galaxy/all)) * all
woman_glaxy_expect = ((woman/all) * (galaxy/alll)) * all
woman_glaxy_expect = ((woman/all) * (galaxy/all)) * all
man_iphone_expect = ((man/all)*(iphone/all)) * all
woman_iphone_expect = ((woman/all) * (iphone/all)) * all
chi_sq = (72 - man_glaxy_expect)**2/man_glaxy_expect +
(28 - woman_glaxy_expect)**2/woman_glaxy_expect +
(55 - man_iphone_expect)**2/man_iphone_expect +
(67 - woman_iphone_expect)**2/woman_iphone_expect
chi_sq
man_galaxy = 72
man_iphone = 55
woman_galaxy = 28
woman_iphone = 67
all = man_galaxy + man_iphone + woman_galaxy + woman_iphone
man = man_galaxy + man_iphone
woman = woman_galaxy + woman_iphone
galaxy = man_galaxy + woman_galaxy
iphone = man_iphone + woman_iphone
man_glaxy_expect = ((man/all) * (galaxy/all)) * all
woman_glaxy_expect = ((woman/all) * (galaxy/all)) * all
man_iphone_expect = ((man/all) * (iphone/all)) * all
woman_iphone_expect = ((woman/all) * (iphone/all)) * all
chi_sq = (72 - man_glaxy_expect)**2/man_glaxy_expect +
(28 - woman_glaxy_expect)**2/woman_glaxy_expect +
(55 - man_iphone_expect)**2/man_iphone_expect +
(67 - woman_iphone_expect)**2/woman_iphone_expect
chi_sq
rm(list=ls())
man_galaxy = 72
man_iphone = 55
woman_galaxy = 28
woman_iphone = 67
all = man_galaxy + man_iphone + woman_galaxy + woman_iphone
man = man_galaxy + man_iphone
woman = woman_galaxy + woman_iphone
galaxy = man_galaxy + woman_galaxy
iphone = man_iphone + woman_iphone
man_glaxy_expect = ((man/all) * (galaxy/all)) * all
woman_glaxy_expect = ((woman/all) * (galaxy/all)) * all
man_iphone_expect = ((man/all) * (iphone/all)) * all
woman_iphone_expect = ((woman/all) * (iphone/all)) * all
chi_sq = (man_galaxy - man_glaxy_expect)**2/man_glaxy_expect +
(woman_galaxy - woman_glaxy_expect)**2/woman_glaxy_expect +
(man_iphone - man_iphone_expect)**2/man_iphone_expect +
(woman_iphone - woman_iphone_expect)**2/woman_iphone_expect
chi_sq
data.frame(man = c(72,55), woman=c(28,67))
test = data.frame(man = c(72,55), woman=c(28,67))
chisq.test(test)
chisq.test()
chisq.test
chisq.test()
?chisq.test
library(rgdal)
data = readOGR(dsn = "C:/Users/student/Desktop/seoul", layer = "my_map")
plot(data)
data@data$ADM_NM = Encoding("UTF-8")
plot(data)
plot(data)
View(data)
rm(list = ls())
data = read.csv("C:/R_study_secret/data/one_sample.csv", header = T)
head(data)
x = data$time
sum(is.na(x))
summary(x)
mean(x, na.rm = T)
x1 = na.omit(x)
x1
summary(x1)
shapiro.test(x1)
# 정규성을 따르는 것이 귀무가설
shapiro.test(x1)
hist(x1)
qqnorm(x1)
data2 = read.csv("C:/R_study_secret/data/two_sample.csv", header = T)
head(data2)
x = data2$method
y = data2$survey
table(x)
table(y)
table(x,y,useNA = 'ifany')
t.test(x, y)
prop.test(x, y)
prop.test(c(x, y))
prop.test(x)
prop.test(c(x[1], x[2]))
prop.test(c(110, 135), c(150, 150))
?prop.test
prop.test(c(110, 135), c(150, 150), alternative = "greater")
prop.test(c(110, 135), c(150, 150), alternative = "less")
# 150명 중에 110명 / 150명 중에 135명 식으로 매핑
# H0: 두 사건의 발생 빈도는 차이가 없다
prop.test(c(110, 135), c(150, 150))
prop.test(c(110, 135), c(150, 150), alternative = "less")
# 150명 중에 110명 / 150명 중에 135명 식으로 매핑
# H0: 두 사건의 발생 빈도는 차이가 없다
prop.test(c(110, 135), c(150, 150))
prop.test(c(110, 135), c(150, 150), alternative = "less")
# subset은 R에서 유일하게 행 단위 연산을 실시함
res = subset(data2, !is.na(score), c(method, score))
res
summary(res)
length(res)
length(res,1)
length(res,2)
?length
dim(res)
g1 = subset(res, method==1)
# 교육 방법별 그룹을 분할
g1 = subset(res, method==1)
g2 = subset(res, method==2)
t.test(g1, g2)
length(c(g1, g2))
length(g1)
length(g2)
length(g1$method)
length(g1$score)
length(g2$score)
mean(g1$score)
mean(g2$score)
hist(g1$score)
plot(g1$score)
barplot(g1$score, g2$score)
hist(g1$score, g2$score)
hist(g1$score)
hist(g2$score, add = T)
hist(g2$score, add = T, rgb=(1,0,0))
hist(g2$score, add = T, rgb=(0.8,0.2,0.2))
hist(g2$score, add = T, col=rgb(0.8,0.2,0.2))
hist(g1$score, add = T)
var.test(g1$score, g2$score)
installed.packages()
?t.test
t.test(g1, g2)
t.test(g1, g2, var.equal = T)
t.test(x, y)
t.test(x, y, var.equal = T)
t.test(x, y, var.equal = F) #
t.test(g1, g2, var.equal = T, alternative = "greater")
t.test(g1, g2, var.equal = T, alternative = "less")
t.test(g1, g2, var.equal = T, alternative = "two-sided")
t.test(g1, g2, var.equal = T, alternative = "two.sided")
# 대응 표본에 대한 T 검정: 대응 표본 t 검정 (동질표본)
data3 = read.csv("C:/R_study_secret/data/paired_sample.csv", header = T)
head(data3)
summary(data3)
res = subset(data3, !is.na(data$after), c(before, after))
head(res)
res = subset(data3, !is.na(after), c(before, after))
head(res)
x = res$before
y = res$after
var.test(x, y, paired=T)
t.test(x, y, paired=T)
t.test(x, y, paired=T, var.equal = T)
var.test(x, y, paired=T)
rm(list=ls())
data = read.csv("C:/R_study_secret/data/cleanDescriptive.csv", header = T)
summary(data)
head(data)
x = data$level2
# level/level2는 부모의 학력
x = data$level2
# pass2는 대학 진학 여부
y = data$pass2
table(x,y)
table(x,y, usena = "ifany")
table(x,y)
sum(x)
table(x)
table(y)
my_data = data.frame(x, y)
my_data
chisq.test(my_data)
rm(my_data)
install.packages(c("gmodels"))
library(gmodels)
diamonds = diamonds
diamond = diamonds
library(ggplot2)
diamond = diamonds
summary(diamond)
CrossTable(x,y)
summary(diamond)
CrossTable(diamond$color, diamond$price)
CrossTable(diamond$color, diamond$clarity)
?CrossTable
rm(list=ls())
library(gmodels)
library(ggplot2)
diamond = diamonds
CrossTable(x,y)
CrossTable(diamonds$color, diamonds$clarity)
CrossTable(x,y)
# level/level2는 부모의 학력
x = data$level2
# pass2는 대학 진학 여부
y = data$pass2
table(x,y)
data = read.csv("C:/R_study_secret/data/cleanDescriptive.csv", header = T)
head(data)
summary(data)
# level/level2는 부모의 학력
x = data$level2
# pass2는 대학 진학 여부
y = data$pass2
table(x,y)
CrossTable(x,y)
CrossTable(x,y,chisq = T)
rm(list=ls())
data(cars)
data = cars
rm(cars)
summary(data)
model = lm(dist ~ speed, data)
summary(model)
library(cars)
install.packages("cars")
install.package(geosphere)
install.packages(geosphere)
install.packages("geosphere")
library(geosphere)
setwd("C:\\Semi_project\\address")
library(geosphere)
addr = read.csv("집계코드_위도_경도_주소.csv", header = T)
department = read.csv("점포이름_위도_경도_주소.csv", header = T)
head(addr)
lon1 = addr$lon[1]
lat1 = addr$lat[1]
lon2 = addr$lon[2]
lat2 = addr$lat[2]
distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
my_dist(lon1, lat1, lon2, lat2)
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHarversine)
return(dist)
}
my_dist(lon1, lat1, lon2, lat2)
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
return(dist)
}
my_dist(lon1, lat1, lon2, lat2)
temp = my_dist(lon1, lat1, lon2, lat2)
class(temp)
dist = as.vector(distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine))
my_dist = function(lon1, lat1, lon2, lat2){
dist = as.vector(distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine))
return(dist)
}
distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)[1,1]
return(dist)
}
distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
View(my_dist)
distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
temp = my_dist(lon1, lat1, lon2, lat2)
class(temp)
is.vector(temp)
is.matrix(temp)
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
return(dist)
}
distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
temp = my_dist(lon1, lat1, lon2, lat2)
class(temp)
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)[1,1]
return(dist)
}
address = read.csv("집계코드_위도_경도_주소.csv", header = T)
department = read.csv("점포이름_위도_경도_주소.csv", header = T)
rm(list = ls())
address = read.csv("집계코드_위도_경도_주소.csv", header = T)
department = read.csv("점포이름_위도_경도_주소.csv", header = T)
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)[1,1]
return(dist)
}
data[length(addr), length(department)] = 0
data[length(address), length(department)] = 0
data = zeros(length(address), length(department)
data = zeros(length(address), length(department))
data = zeros(length(address), length(department))
data = matrix(rep(0, length(address) * length(department)), nrow = length(department))
data
?rep
rep(0, 5)
rep(100)
rep(0, 100)
length(address) * length(department)
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department))
data(1,1)
data[1,1]
for depart in 1:length(department){
print(depart)
}
for depart in 1:length(department$X){
print(depart)
}
for depart in 1:length(department$X){
print(depart)
}
for depart in (1:length(department$X)){
print(depart)
}
?for
for (depart in 1:length(department$X)){
print(depart)
}
print(departemnt$lon[depart])
for (depart in 1:length(department$X)){
print(departemnt$lon[depart])
}
View(department)
department$lon
department$lon[1]
for (depart in 1:length(department$X)){
department$lon[depart]
}
print(department$lon[depart])
for (depart in 1:length(department$X)){
print(department$lon[depart])
}
length(address$X) * length(department$X)
addr
addr = 1
depart = 1
addr * depart / length(address$X) * length(department$X)
cat(addr * depart / length(address$X) * length(department$X) / ,"%")
cat(addr * depart / length(address$X) * length(department$X),"%")
cat(addr * depart / length(address$X) * length(department$X),"%")
for (depart in 1:length(department)){
for (depart in 1:length(department)){
for (addr in 1:length(addr)){
if (length(address$X) * length(department$X) %% 1000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
}
}
data
head(data)
View(data)
min(data)
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department$x))
rm(data)
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department$x))
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department$X))
for (depart in 1:length(department)){
for (addr in 1:length(addr)){
if (length(address$X) * length(department$X) %% 1000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
}
}
max(data)
max(data,2)
max(data,1)
head(data)
for (depart in 1:length(department)){
for (addr in 1:length(addr)){
# if (length(address$X) * length(department$X) %% 1000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
# data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
}
}
# if (length(address$X) * length(department$X) %% 1000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
# data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
for (depart in 1:length(department)){
for (addr in 1:length(addr)){
# if (length(address$X) * length(department$X) %% 1000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
# data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$X)){
for (addr in 1:length(addr$X)){
# if (length(address$X) * length(department$X) %% 1000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
# data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$X)){
for (addr in 1:length(address$X)){
# if (length(address$X) * length(department$X) %% 1000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
# data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$X)){
for (addr in 1:length(address$X)){
if (length(address$X) * length(department$X) %% 1000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
rm(data)
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department$X))
# for (depart in 1:length(department$X)){
for (depart in 1:2){
for (addr in 1:length(address$X)){
if (length(address$X) * length(department$X) %% 10000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
# for (depart in 1:length(department$X)){
for (depart in 1:2){
for (addr in 1:length(address$X)){
if (length(address$X) * length(department$X) %% 1000 == 0) {cat(addr * depart / length(address$X) * length(department$X),"%")}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department$X))
rm(data)
rm(c(addr, depart))
rm(addr)
rm(depart)
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department$X))
# for (depart in 1:length(department$X)){
for (depart in 1:2){
for (addr in 1:length(address$X)){
if (length(address$X) * length(department$X) %% 100 == 1) {cat(addr * depart / length(address$X) * length(department$X),"%")}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
min(data[,1])
max(data[,1])
mean(data[,1])
plot(data[,1])
avg(data[1,])
mean(data[1,])
min(data[1,])
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department$X))
for (depart in 1:length(department$X)){
# for (depart in 1:1){
for (addr in 1:length(address$X)){
if (length(address$X) * length(department$X) %% 100 == 1) {cat(addr * depart / length(address$X) * length(department$X),"%")}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
dim(data)
class(dim)
class(data)
data[1,1]
res = as.data.frame(data)
write.csv(res, "distance_matrix.csv")
res = as.data.frame(data.T)
temp = data.T
temp = t(data)
res = as.data.frame(temp)
write.csv(res, "distance_matrix.csv")
