<<<<<<< HEAD
<<<<<<< HEAD
rownames(french_fries) <- NULL
identical(r, french_fries)
rm(list=ls())
18/49
12/49
df = data.frame(age, gender, income, region)
age = c(20, 30, 40, 50)
gender = c("F", "M", "M", "F")
income = c(1000, 2000, 3000, 4000)
region = c('S', 'S', 'G', "G")
df = data.frame(age, gender, income, region)
library(reshape2)
df_melt = melt(df, id.vars = c(age, gender))
df_melt = melt(df, id.vars = c("gender", "region"))
df_melt
cast(df_melt, gender ~ variable + value)
reshape2::cast(df_melt, gender ~ variable + value)
?melt
?cast
cast(df_melt, gender ~ variable + value)
cast(df.melt, gender ~ variable + region)
dcast(df_melt, gender ~ variable + value)
dcast(df_melt, gender ~ variable + region)
dcast(df_melt, gender ~ region + variable)
dcast(df_melt, gender + region ~ variable)
df_melt
dcast(df_melt, gender + region ~ variable)
?pairs
0/0
lm(mpg~.,data=mtcars)
res = lm(formula = mpg ~ ., data = mtcars)
summary(res)
?tm::stemDocument
rm(list=ls())
data = airquality
data[2]
data['ozone']
data[ozone]
data$Ozone
data['Ozone']
data[['Ozone']]
77 + 55
28 + 67
77 + 55 + 28 + 67
72 + 55 + 28 + 67
222/4
72+55
all = 72 + 55 + 28 + 67
man = 72 + 55
woman = 28 + 67
galaxy = 72 + 28
iphone = 55 + 67
man_glaxy_expect = (man/all + galaxy/all) * all
man_glaxy_expect = ((man/all) * (galaxy/all)) * all
woman_glaxy_expect = ((woman/all) * (galaxy/alll)) * all
woman_glaxy_expect = ((woman/all) * (galaxy/all)) * all
man_iphone_expect = ((man/all)*(iphone/all)) * all
woman_iphone_expect = ((woman/all) * (iphone/all)) * all
chi_sq = (72 - man_glaxy_expect)**2/man_glaxy_expect +
(28 - woman_glaxy_expect)**2/woman_glaxy_expect +
(55 - man_iphone_expect)**2/man_iphone_expect +
(67 - woman_iphone_expect)**2/woman_iphone_expect
chi_sq
man_galaxy = 72
man_iphone = 55
woman_galaxy = 28
woman_iphone = 67
all = man_galaxy + man_iphone + woman_galaxy + woman_iphone
man = man_galaxy + man_iphone
woman = woman_galaxy + woman_iphone
galaxy = man_galaxy + woman_galaxy
iphone = man_iphone + woman_iphone
man_glaxy_expect = ((man/all) * (galaxy/all)) * all
woman_glaxy_expect = ((woman/all) * (galaxy/all)) * all
man_iphone_expect = ((man/all) * (iphone/all)) * all
woman_iphone_expect = ((woman/all) * (iphone/all)) * all
chi_sq = (72 - man_glaxy_expect)**2/man_glaxy_expect +
(28 - woman_glaxy_expect)**2/woman_glaxy_expect +
(55 - man_iphone_expect)**2/man_iphone_expect +
(67 - woman_iphone_expect)**2/woman_iphone_expect
chi_sq
rm(list=ls())
man_galaxy = 72
man_iphone = 55
woman_galaxy = 28
woman_iphone = 67
all = man_galaxy + man_iphone + woman_galaxy + woman_iphone
man = man_galaxy + man_iphone
woman = woman_galaxy + woman_iphone
galaxy = man_galaxy + woman_galaxy
iphone = man_iphone + woman_iphone
man_glaxy_expect = ((man/all) * (galaxy/all)) * all
woman_glaxy_expect = ((woman/all) * (galaxy/all)) * all
man_iphone_expect = ((man/all) * (iphone/all)) * all
woman_iphone_expect = ((woman/all) * (iphone/all)) * all
chi_sq = (man_galaxy - man_glaxy_expect)**2/man_glaxy_expect +
(woman_galaxy - woman_glaxy_expect)**2/woman_glaxy_expect +
(man_iphone - man_iphone_expect)**2/man_iphone_expect +
(woman_iphone - woman_iphone_expect)**2/woman_iphone_expect
chi_sq
data.frame(man = c(72,55), woman=c(28,67))
test = data.frame(man = c(72,55), woman=c(28,67))
chisq.test(test)
chisq.test()
chisq.test
chisq.test()
?chisq.test
library(rgdal)
data = readOGR(dsn = "C:/Users/student/Desktop/seoul", layer = "my_map")
plot(data)
data@data$ADM_NM = Encoding("UTF-8")
plot(data)
plot(data)
View(data)
rm(list = ls())
data = read.csv("C:/R_study_secret/data/one_sample.csv", header = T)
head(data)
x = data$time
sum(is.na(x))
summary(x)
mean(x, na.rm = T)
x1 = na.omit(x)
x1
summary(x1)
shapiro.test(x1)
# 정규성을 따르는 것이 귀무가설
shapiro.test(x1)
hist(x1)
qqnorm(x1)
data2 = read.csv("C:/R_study_secret/data/two_sample.csv", header = T)
head(data2)
x = data2$method
y = data2$survey
table(x)
table(y)
table(x,y,useNA = 'ifany')
t.test(x, y)
prop.test(x, y)
prop.test(c(x, y))
prop.test(x)
prop.test(c(x[1], x[2]))
prop.test(c(110, 135), c(150, 150))
?prop.test
prop.test(c(110, 135), c(150, 150), alternative = "greater")
prop.test(c(110, 135), c(150, 150), alternative = "less")
# 150명 중에 110명 / 150명 중에 135명 식으로 매핑
# H0: 두 사건의 발생 빈도는 차이가 없다
prop.test(c(110, 135), c(150, 150))
prop.test(c(110, 135), c(150, 150), alternative = "less")
# 150명 중에 110명 / 150명 중에 135명 식으로 매핑
# H0: 두 사건의 발생 빈도는 차이가 없다
prop.test(c(110, 135), c(150, 150))
prop.test(c(110, 135), c(150, 150), alternative = "less")
# subset은 R에서 유일하게 행 단위 연산을 실시함
res = subset(data2, !is.na(score), c(method, score))
res
summary(res)
length(res)
length(res,1)
length(res,2)
?length
dim(res)
g1 = subset(res, method==1)
# 교육 방법별 그룹을 분할
g1 = subset(res, method==1)
g2 = subset(res, method==2)
t.test(g1, g2)
length(c(g1, g2))
length(g1)
length(g2)
length(g1$method)
length(g1$score)
length(g2$score)
mean(g1$score)
mean(g2$score)
hist(g1$score)
plot(g1$score)
barplot(g1$score, g2$score)
hist(g1$score, g2$score)
hist(g1$score)
hist(g2$score, add = T)
hist(g2$score, add = T, rgb=(1,0,0))
hist(g2$score, add = T, rgb=(0.8,0.2,0.2))
hist(g2$score, add = T, col=rgb(0.8,0.2,0.2))
hist(g1$score, add = T)
var.test(g1$score, g2$score)
installed.packages()
?t.test
t.test(g1, g2)
t.test(g1, g2, var.equal = T)
t.test(x, y)
t.test(x, y, var.equal = T)
t.test(x, y, var.equal = F) #
t.test(g1, g2, var.equal = T, alternative = "greater")
t.test(g1, g2, var.equal = T, alternative = "less")
t.test(g1, g2, var.equal = T, alternative = "two-sided")
t.test(g1, g2, var.equal = T, alternative = "two.sided")
# 대응 표본에 대한 T 검정: 대응 표본 t 검정 (동질표본)
data3 = read.csv("C:/R_study_secret/data/paired_sample.csv", header = T)
head(data3)
summary(data3)
res = subset(data3, !is.na(data$after), c(before, after))
head(res)
res = subset(data3, !is.na(after), c(before, after))
head(res)
x = res$before
y = res$after
var.test(x, y, paired=T)
t.test(x, y, paired=T)
t.test(x, y, paired=T, var.equal = T)
var.test(x, y, paired=T)
rm(list=ls())
data = read.csv("C:/R_study_secret/data/cleanDescriptive.csv", header = T)
summary(data)
head(data)
x = data$level2
# level/level2는 부모의 학력
x = data$level2
# pass2는 대학 진학 여부
y = data$pass2
table(x,y)
table(x,y, usena = "ifany")
table(x,y)
sum(x)
table(x)
table(y)
my_data = data.frame(x, y)
my_data
chisq.test(my_data)
rm(my_data)
install.packages(c("gmodels"))
library(gmodels)
diamonds = diamonds
diamond = diamonds
library(ggplot2)
diamond = diamonds
summary(diamond)
CrossTable(x,y)
summary(diamond)
CrossTable(diamond$color, diamond$price)
CrossTable(diamond$color, diamond$clarity)
?CrossTable
rm(list=ls())
library(gmodels)
library(ggplot2)
diamond = diamonds
CrossTable(x,y)
CrossTable(diamonds$color, diamonds$clarity)
CrossTable(x,y)
# level/level2는 부모의 학력
x = data$level2
# pass2는 대학 진학 여부
y = data$pass2
table(x,y)
data = read.csv("C:/R_study_secret/data/cleanDescriptive.csv", header = T)
head(data)
summary(data)
# level/level2는 부모의 학력
x = data$level2
# pass2는 대학 진학 여부
y = data$pass2
table(x,y)
CrossTable(x,y)
CrossTable(x,y,chisq = T)
rm(list=ls())
data(cars)
data = cars
rm(cars)
summary(data)
model = lm(dist ~ speed, data)
summary(model)
library(cars)
install.packages("cars")
install.package(geosphere)
install.packages(geosphere)
install.packages("geosphere")
library(geosphere)
setwd("C:\\Semi_project\\address")
library(geosphere)
addr = read.csv("집계코드_위도_경도_주소.csv", header = T)
department = read.csv("점포이름_위도_경도_주소.csv", header = T)
head(addr)
lon1 = addr$lon[1]
lat1 = addr$lat[1]
lon2 = addr$lon[2]
lat2 = addr$lat[2]
distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
my_dist(lon1, lat1, lon2, lat2)
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHarversine)
return(dist)
}
my_dist(lon1, lat1, lon2, lat2)
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
return(dist)
}
my_dist(lon1, lat1, lon2, lat2)
temp = my_dist(lon1, lat1, lon2, lat2)
class(temp)
dist = as.vector(distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine))
my_dist = function(lon1, lat1, lon2, lat2){
dist = as.vector(distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine))
return(dist)
}
distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)[1,1]
return(dist)
}
distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
View(my_dist)
distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
temp = my_dist(lon1, lat1, lon2, lat2)
class(temp)
is.vector(temp)
is.matrix(temp)
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
return(dist)
}
distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
temp = my_dist(lon1, lat1, lon2, lat2)
class(temp)
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)[1,1]
return(dist)
}
address = read.csv("집계코드_위도_경도_주소.csv", header = T)
department = read.csv("점포이름_위도_경도_주소.csv", header = T)
rm(list = ls())
address = read.csv("집계코드_위도_경도_주소.csv", header = T)
department = read.csv("점포이름_위도_경도_주소.csv", header = T)
=======
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void() +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void() +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
suppressPackageStartupMessages({
library(ggplot2)
library(ggthemes)
library(extrafont)
})
install.packages(c("ggthemes", "extrafont"))
suppressPackageStartupMessages({
library(ggplot2)
library(ggthemes)
library(extrafont)
})
?theme_void
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void(base_family='NanumGothic')) +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_set(theme_void(base_family='NanumGothic'))) +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void(base_family='Malgun Gothic')) +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
font_import()
font_import()
theme_set(theme_void(base_family='AppleMyungjo'))
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void() +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
theme_set(theme_gray(base_family='AppleMyungjo'))
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray() +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void() +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray() +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
?them_gray
?theme_gray
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
for (depart in 1:nrow(department)){
target = header_data[header_data[,2] %in% my_mat[, (depart * 2 - 1)], 2]
# target_coord = my_spdf[as.integer(my_spdf@data[, "TOT_REG_CD"]) == target, ]
# plot(target_coord)
target_coord = subset(converted, TOT_REG_CD %in% target)
target_df = broom::tidy(target_coord)
cname = aggregate(cbind(long, lat) ~ id, data = target_df, FUN = mean)
label_data = cbind(cname, target_coord@data)
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
invisible(readline(prompt="Press [enter] to continue"))
}
View(converted)
temp = tidy(converted)
library(broom)
temp = tidy(converted)
View(temp)
cname = aggregate(cbind(long, lat) ~ id, data = target_df, FUN = mean)
View(cname)
cname = aggregate(cbind(long, lat) ~ id, data = temp, FUN = mean)
View(cname)
plot(cname)
ggplot(data = cname, aes(x = long, y = lat))
ggplot(data = cname, aes(x = long, y = lat)) + geom_point()
rm(list = ls())
source('~/.active-rstudio-document', echo=TRUE)
shp_df = tidy(converted)
district_data = aggregate(cbind(long, lat) ~ id, data = shp_df, FUN = mean)
View(district_data)
nrow(converted$TOT_REG_CD)
length(converted$TOT_REG_CD)
district_data = cbind(converted$TOT_REG_CD, district_data)
View(district_data)
district_data = cbind(TOT_REG_CD = converted$TOT_REG_CD, district_data)
View(district_data)
district_data = aggregate(cbind(long, lat) ~ id, data = shp_df, FUN = mean)
district_data = cbind(TOT_REG_CD = converted$TOT_REG_CD, district_data)
View(district_data)
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department$X))
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)[1,1]
return(dist)
}
str(district_data)
department
res = matrix(rep(0, length(district_data$TOT_REG_CD) * length(department$name)), nrow = length(department$name))
res
department
str(district_data)
for (depart in 1:length(department$name)){
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (length(district_data$TOT_REG_CD) * length(department$name) %% 100 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
library(geosphere)
install.packages("geosphere")
library(geosphere)
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (length(district_data$TOT_REG_CD) * length(department$name) %% 100 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
res = matrix(rep(0, length(district_data$TOT_REG_CD) * length(department$name)), nrow = length(department$name))
data = read.csv("distance_matrix.csv")
data = data[-1]
data
rm(list = ls())
setwd("~/GitRepo/Multicampus_semi/address")
header_data = read.csv("집계코드_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
options("scipen" = 100)
header = header_data[,2]
head(header_data)
department = read.csv("점포이름_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
head(department)
library(rgdal)
library(ggplot2)
my_spdf <- readOGR(
dsn= paste0("../map/") ,
layer="seoul"
)
# 한국 중부 좌표계
from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m")
# 세계 표준 좌표계
to_crs = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
proj4string(my_spdf) = from_crs
converted = spTransform(my_spdf, to_crs)
library(broom)
shp_df = tidy(converted)
district_data = aggregate(cbind(long, lat) ~ id, data = shp_df, FUN = mean)
district_data = cbind(TOT_REG_CD = converted$TOT_REG_CD, district_data)
library(geosphere)
>>>>>>> 04c984f6692c6eafda190f1501963ce2f94ad9da
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)[1,1]
return(dist)
}
<<<<<<< HEAD
data[length(addr), length(department)] = 0
data[length(address), length(department)] = 0
data = zeros(length(address), length(department)
data = zeros(length(address), length(department))
data = zeros(length(address), length(department))
data = matrix(rep(0, length(address) * length(department)), nrow = length(department))
data
?rep
rep(0, 5)
rep(100)
rep(0, 100)
length(address) * length(department)
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department))
data(1,1)
data[1,1]
for depart in 1:length(department){
print(depart)
}
for depart in 1:length(department$X){
print(depart)
}
for depart in 1:length(department$X){
print(depart)
}
for depart in (1:length(department$X)){
print(depart)
}
?for
for (depart in 1:length(department$X)){
print(depart)
}
print(departemnt$lon[depart])
for (depart in 1:length(department$X)){
print(departemnt$lon[depart])
}
View(department)
department$lon
department$lon[1]
for (depart in 1:length(department$X)){
department$lon[depart]
}
print(department$lon[depart])
for (depart in 1:length(department$X)){
print(department$lon[depart])
}
length(address$X) * length(department$X)
addr
addr = 1
depart = 1
addr * depart / length(address$X) * length(department$X)
cat(addr * depart / length(address$X) * length(department$X) / ,"%")
cat(addr * depart / length(address$X) * length(department$X),"%")
cat(addr * depart / length(address$X) * length(department$X),"%")
for (depart in 1:length(department)){
for (depart in 1:length(department)){
for (addr in 1:length(addr)){
if (length(address$X) * length(department$X) %% 1000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
}
}
data
head(data)
View(data)
min(data)
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department$x))
rm(data)
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department$x))
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department$X))
for (depart in 1:length(department)){
for (addr in 1:length(addr)){
if (length(address$X) * length(department$X) %% 1000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
}
}
max(data)
max(data,2)
max(data,1)
head(data)
for (depart in 1:length(department)){
for (addr in 1:length(addr)){
# if (length(address$X) * length(department$X) %% 1000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
# data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
}
}
# if (length(address$X) * length(department$X) %% 1000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
# data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
for (depart in 1:length(department)){
for (addr in 1:length(addr)){
# if (length(address$X) * length(department$X) %% 1000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
# data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$X)){
for (addr in 1:length(addr$X)){
# if (length(address$X) * length(department$X) %% 1000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
# data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$X)){
for (addr in 1:length(address$X)){
# if (length(address$X) * length(department$X) %% 1000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
# data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$X)){
for (addr in 1:length(address$X)){
if (length(address$X) * length(department$X) %% 1000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
rm(data)
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department$X))
# for (depart in 1:length(department$X)){
for (depart in 1:2){
for (addr in 1:length(address$X)){
if (length(address$X) * length(department$X) %% 10000) {cat(addr * depart / length(address$X) * length(department$X),"%")}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
# for (depart in 1:length(department$X)){
for (depart in 1:2){
for (addr in 1:length(address$X)){
if (length(address$X) * length(department$X) %% 1000 == 0) {cat(addr * depart / length(address$X) * length(department$X),"%")}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department$X))
rm(data)
rm(c(addr, depart))
rm(addr)
rm(depart)
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department$X))
# for (depart in 1:length(department$X)){
for (depart in 1:2){
for (addr in 1:length(address$X)){
if (length(address$X) * length(department$X) %% 100 == 1) {cat(addr * depart / length(address$X) * length(department$X),"%")}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
min(data[,1])
max(data[,1])
mean(data[,1])
plot(data[,1])
avg(data[1,])
mean(data[1,])
min(data[1,])
data = matrix(rep(0, length(address$X) * length(department$X)), nrow = length(department$X))
for (depart in 1:length(department$X)){
# for (depart in 1:1){
for (addr in 1:length(address$X)){
if (length(address$X) * length(department$X) %% 100 == 1) {cat(addr * depart / length(address$X) * length(department$X),"%")}
data[depart, addr] = my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
dim(data)
class(dim)
class(data)
data[1,1]
res = as.data.frame(data)
write.csv(res, "distance_matrix.csv")
res = as.data.frame(data.T)
temp = data.T
temp = t(data)
res = as.data.frame(temp)
write.csv(res, "distance_matrix.csv")
=======
func3(9,13)
func_self = function(x){
x = func_self(x)
print(x)
}
func_self(1)
func_self = function(x){
x = sum(func_self(x))
if (x > 100){
break;
}
print(x)
}
func_self(1)
exam2 = function(my_num){
result = 0
for (i in 1:my_num){
result = result + i
}
return(result)
}
rm(list=ls())
abs(10)
abs(-19)
operator = +
operator = "+"
as.character
operator_list = c("+", "-", "*", "%/%", "%%")
operator !in operator_list
operator in operator_list
operator
operator_list
# Q4
exam4 = function(num1, operator, num2){
result = 0
if (operator == "+"){
result = num1 + num2
}else if (operator == "-"){
result = num1 - num2
}else if (operator == "*"){
result = num1 * num2
}else if (operator == "%/%" | operator == "%%"){
if (num1 == 0){
print("오류 1")
}else if (num2 == 0){
print("오류 2")
}else{
if (operator == "%/%"){
result = num1 %/% num2
}else{
result = num1 %% num2
}
}
}else{
print("규격의 연산자만 전달하세요")
}
}
Q4_result = exam4(10, "+", 20)
Q4_result
Q4_result = exam4(0, "%%", 3)
Q4_result = exam4(3, "%%", 0)
Q4_result
# Q4
exam4 = function(num1, operator, num2){
result = 0
if (operator == "+"){
result = num1 + num2
}else if (operator == "-"){
result = num1 - num2
}else if (operator == "*"){
result = num1 * num2
}else if (operator == "%/%" | operator == "%%"){
if (num1 == 0){
result = "오류 1"
}else if (num2 == 0){
result = "오류 2"
}else{
if (operator == "%/%"){
result = num1 %/% num2
}else{
result = num1 %% num2
}
}
}else{
result = "규격의 연산자만 전달하세요"
}
return(result)
}
Q4_result = exam4(10, "+", 20)
Q4_result
Q4_result = exam4(0, "%%", 3)
Q4_result
Q4_result = exam4(3, "%%", 0)
Q4_result
Q4_result = exam(3, "/", 19)
Q4_result = exam4(3, "/", 19)
Q4_result
Q3_result = exam3(10, 20)
Q3_result
# Q3
exam3() = function(num1, num2){
result = 0
if (num1 > num2){
result = num1 - num2
}else if (num1 < num2){
result = num2 - num1
}else{
result = 0
}
return(result)
}
Q3_result = exam3(10, 20)
# Q3
exam3 = function(num1, num2){
result = 0
if (num1 > num2){
result = num1 - num2
}else if (num1 < num2){
result = num2 - num1
}else{
result = 0
}
return(result)
}
Q3_result = exam3(10, 20)
Q3_result
rm(list=ls())
a = c(1,2,3,4)
3 %in% a
rm(list=ls())
func4 = function(x=100, y=200, z){
return(x+y+Z)
}
func4()
func4(10,20,30)
return(x+y+z)
func4 = function(x=100, y=200, z){
return(x+y+z)
}
func4(10,20,30)
func4(z=100)
a = 3; b = 7; c = 11;
ft = function(a){
b = a + 10
c <<- a + 10
d = a
a; b; c; d
return()
}
print(ft(100))
a = 3; b = 7; c = 11;
ft = function(a){
b = a + 10
c <<- a + 10
d = a
print(a); print(b); print(c); print(d)
return()
}
print(ft(100))
a; b; c; d
sum
sum()
a = c(1,2)
a
a()
hi <- function() {
print("hi")
}
hi()
hi
string <- function(print(sting))
print(string)
print(string)
print(x)
string <- function(x){
print(x)
}
View(string)
string("안녀영")
printMyString = function(x, y, z){
print(x)
print(y)
print(z)
}
printMySting("A", "가", "B")
printMyString("A", "가", "B")
printMyString = function(x, y, z){
print(z)
print(y)
print(x)
}
printMyString("A", "가", "B")
myVec = c(1,2,3,4,5)
sum(myVec)
result <- sum(myVec)
result
a = print(3)
a
rm(a)
a
a = print(3)
a
rm(a)
a = cat(3)
a
library(xlsx)
library(rJava)
library(xlsx)
library(xlsx)
library(rjava)
library(rJava)
dir(paste0(system2('/usr/libexec/java_home',stdout = TRUE)))
dyn.load(paste0(system2('/usr/libexec/java_home', stdout = TRUE), '/jre/lib/server/libjvm.dylib'))
dyn.load("/Library/Java/JavaVirtualMachines/jdk-13.0.1.jdk/Contents/Home/jre/lib/server/libjvm.dylib")
library(rJava)
Sys.setenv("JAVA_HOME" = /Library/Java/JavaVirtualMachines/jdk-13.0.1.jdk/Contents/Home/jre)
Sys.setenv("JAVA_HOME" = "/Library/Java/JavaVirtualMachines/jdk-13.0.1.jdk/Contents/Home/jre")
dyn.load("/Library/Java/JavaVirtualMachines/jdk-13.0.1.jdk/Contents/Home/jre/lib/server/libjvm.dylib")
a = 1:10
matrix(a)
getwd()
setwd("~/GitRepo/Multicampus_semi/address/")
data = read.csv("distance_matrix.csv")
min(data[,1])
mean(data[,1])
length(data)
my_mat = matrix(rep(length(data)*5), nrow=5)
my_mat = matrix(rep(0,length(data)*5), nrow=5)
View(my_mat)
data[1]
data[2]
View(data)
data[-1]
temp = data[-1]
View(temp)
data = data[-1]
my_mat = matrix(rep(0,length(data)*5), nrow=5)
head(sort(data[1]))
head(sort(data[,1]))
for (dept in 1:length(data)){
my_mat[,dept] = head(sort(data[,dept]))
}
rm(my_mat)
for (dept in 1:length(data)){
my_mat[,dept] = head(sort(data[,dept]))
}
# my_mat = matrix(rep(0,length(data)*5), nrow=5)
my_mat = NULL
for (dept in 1:length(data)){
my_mat[,dept] = head(sort(data[,dept]))
}
for (dept in 1:length(data)){
my_mat = cbind(my_mat, head(sort(data[,dept])))
}
View(my_mat)
sum(data == 1)
data == 1
sum(data == 1)
for (dept in 1:length(data)){
# my_mat = cbind(my_mat, head(sort(data[,dept])))
print(head(sort(data[,dept])))
}
sum(data == 0)
line = data[,dept]
line == 0
line(line == 0)
dat = data[,dept]
dat == 0
sum(dat == 0)
dat = data[,3]
sum(dat == 0)
dat(dat == 0)
dat[dat == 0]
rm(dat[dat == 0])
dat[dat == 0] = NA
dat[dat==0]
dat==0
head(sort(dat))
# my_mat = matrix(rep(0,length(data)*5), nrow=5)
my_mat = NULL
for (dept in 1:length(data)){
dat = data[,dept]
dat[dat == 0] = NA
my_mat = cbind(my_mat, head(sort(data[,dept])))
print(head(sort(data[,dept])))
}
# my_mat = matrix(rep(0,length(data)*5), nrow=5)
my_mat = NULL
for (dept in 1:length(data)){
dat = data[,dept]
dat[dat == 0] = NA
my_mat = cbind(my_mat, head(sort(dat[,dept])))
print(head(sort(dat[,dept])))
}
# my_mat = matrix(rep(0,length(data)*5), nrow=5)
my_mat = NULL
for (dept in 1:length(data)){
dat = data[,dept]
dat[dat == 0] = NA
my_mat = cbind(my_mat, head(sort(dat)))
print(my_mat[,dept])
}
header = read.csv("집계코드_위도_경도_주소.csv")
header = read.csv("집계코드_위도_경도_주소.csv", encoding = "UTF-8")
header = read.csv("집계코드_위도_경도_주소.csv", encoding = "euc-kr")
header = read.csv("집계코드_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
header[1]
header[2]
header[2,1]
header[1,2]
header = read.csv("집계코드_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
header[1,2]
rm(header)
header = read.csv("집계코드_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
View(header)
options("scipen"=100)
View(header)
options("scipen" 100)
options("scipen" = 100)
header(2)
header(,2)
header[,2]
sort(dat)
order(dat)
sort(order(dat))
idx = order(dat)
View(header)
rm(list = ls())
data = read.csv("distance_matrix.csv")
data = data[-1]
header_data = read.csv("집계코드_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
options("scipen" = 100)
header = header_data[,2]
# my_mat = matrix(rep(0,length(data)*5), nrow=5)
my_mat = NULL
dept=1
dat = data[,dept]
dat[dat == 0] = NA
idx = order(dat)
header[idx]
header[1]
idx[1]
header[idx == 1]
head(sort(dat))
header[sort(idx)]
head(header[sort(idx)])
idx = order(dat)
idx
head(sort(dat))
head(header[idx])
head(header[idx])
for (dept in 1:length(data)){
dat = data[,dept]
dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
print(my_mat[,dept])
}
my_mat
View(my_mat)
my_mat[1,1]
header_data[header == my_mat]
header == my_mat
header == my_mat[1,1]
header == my_mat[1,1]
header_data[header == my_mat[1,1]]
header[header_data == my_mat[1,1],1]
dim(header)
dim(header_data)
header_data[header_data == my_mat[1,1],1]
header_data == my_mat[1,1]
header_data[,1] == my_mat[1,1]
header_data[header_data[,1] == my_mat[1,1],1]
sum(header_data[,1] == my_mat[1,1])
my_mat[1,1]
sum(header_data[,2] == my_mat[1,1])
header_data[header_data[,2] == my_mat[1,1],1]
header_data[header_data[,2] == my_mat[1,1],3]
header_data[header_data[,2] == my_mat[1,1],4]
header_data[header_data[,2] == my_mat[1,1],3]
header_data[header_data[,2] == my_mat[1,1],4]
x = header_data[header_data[,2] == my_mat[1,1],3]
y = header_data[header_data[,2] == my_mat[1,1],4]
plot(x,y)
department = read.csv("백화점주소_2019년.csv")
department = read.csv("백화점주소_2019년.csv", fileEncoding = "CP949", encoding = "euc-kr")
View(department)
department = read.csv("점포이름_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
View(deparse())
View(department
)
install.packages("rgdal")
library(rgdal)
library(rgdal)
library(ggplot2)
getwd()
my_spdf <- readOGR(
dsn= paste0("../map/") ,
layer="seoul",
verbose=FALSE
)
install.packages("broom")
# 'fortify' the data to get a dataframe format required by ggplot2
library(broom)
spdf_fortified <- tidy(my_spdf, region = "NAME")
View(my_spdf)
# Plot it
ggplot() +
geom_polygon(data = spdf_fortified, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void()
# Plot it
ggplot() +
geom_polygon(data = my_spdf, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void()
plot(my_spdf, col="#f2f2f2", bg="skyblue", lwd=0.25, border=0 )
?geom_point
fig + geom_point(aes(x,y))
# Plot it
fig = ggplot() +
geom_polygon(data = my_spdf, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void()
plot(my_spdf, col="#f2f2f2", bg="skyblue", lwd=0.25, border=0 )
plot(my_spdf, col="#f2f2f2", bg="skyblue", border=0 )
# Plot it
fig = ggplot() +
geom_polygon(data = my_spdf, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void() + geom_point(aes(x,y))
fig
ggplot() +
geom_polygon(data = my_spdf, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void()
x
y
header_data[,2] == my_mat[1,1]
header_data[header_data[,2] == my_mat[1,1],2]
header_data[header_data[,2] == my_mat[1,1], 2]
target = header_data[header_data[,2] == my_mat[1,1], 2]
my_spdf
my_spdf[1]
my_spdf[2]
View(my_spdf[1])
View(my_spdf[2])
head(my_spdf@data)
head(my_spdf@data[0])
head(my_spdf@data[1])
head(my_spdf@data[,1])
head(my_spdf@data)
my_spdf@data[, "TOT_REG_CD" == my_mat[1,1]]
my_spdf@data[, int("TOT_REG_CD") == my_mat[1,1]]
my_spdf@data[, as.int("TOT_REG_CD") == my_mat[1,1]]
my_spdf@data[, as.integer("TOT_REG_CD") == my_mat[1,1]]
my_spdf@data[, "TOT_REG_CD"]
as.integer(my_spdf@data[, "TOT_REG_CD"])
as.integer(my_spdf@data[, "TOT_REG_CD"]) == my_mat[1,1]
my_spdf[,as.integer(my_spdf@data[, "TOT_REG_CD"]) == my_mat[1,1]]
my_coord = my_spdf[,as.integer(my_spdf@data[, "TOT_REG_CD"]) == my_mat[1,1]]
plot(my_coord, col="#f2f2f2", bg="skyblue", border=0 )
as.integer(my_spdf@data[, "TOT_REG_CD"]) == my_mat[1,1]
sum(as.integer(my_spdf@data[, "TOT_REG_CD"]) == my_mat[1,1])
temp <- copy(my_spdf[my_spdf@data$TOT_REG_CD==my_map[1,1],])
temp <- my_spdf[my_spdf@data$TOT_REG_CD==my_map[1,1],]
temp <- my_spdf[my_spdf@data$TOT_REG_CD==my_mat[1,1],]
temp
plot(temp)
ggplot() + geom_polygon(data = temp, aes(x = long, y = lat, group = group)) +
theme_void() + geom_point(aes(x,y))
ggplot() + geom_polygon(data = temp, aes(x = long, y = lat, group = group))
ggplot() +
geom_polygon(data = temp, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white")
x = depart[header_data[,2] == my_mat[1,1],3]
department[header_data[,2] == my_mat[1,1],3]
View(department)
department[header_data[,2] == my_mat[1,1]]
x = department[header_data[,2] == my_mat[1,1], 3]
department[header_data[,2] == my_mat[1,1], 3]
department[1]$lon
department$lon
department$lon[1]
x = department$lon[1]
y = department$lat[1]
ggplot() +
geom_polygon(data = temp, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
geom_point(x,y)
ggplot() +
geom_polygon(data = temp, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
geom_point(aes(x,y))
ggplot() +
geom_polygon(data = my_spdf, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void()
ggplot() +
geom_polygon(data = temp, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white")
View(temp)
depart = departemnt[1,]
departemnt
depart = department[1,]
departe
depart
ggplot() +
geom_polygon(data = temp, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
geom_point(data = depart, aes(x = lon, y = lat))
ggplot()+
geom_point(department, aes(lon, lat))
ggplot()+
geom_point(data = department, aes(lon, lat))
?spTransform
shapefile <- spTransform(my_spdf, CRS("+proj=longlat +datum=WGS84")) #change CRS
library(rgdal)
plot(my_spdf, col="#f2f2f2", bg="skyblue", border=0 )
shapefile <- spTransform(my_spdf, CRS("+proj=longlat +datum=WGS84")) #change CRS
proj4string(my_spdf) <- CRS("+proj=longlat +datum=WGS84")
proj4string(my_spdf)
proj4string(my_spdf) <- CRS("+proj=longlat +ellps=WGS84")
>>>>>>> 8b99fc3134cfccaa2aaa6592d905c5cd1e147ee1
=======
res = matrix(rep(0, length(district_data$TOT_REG_CD) * length(department$name)), nrow = length(department$name))
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (length(district_data$TOT_REG_CD) * length(department$name) %% 100 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
View(res)
res = T(res)
res = t(res)
dim(res)
write.csv(res, "distance_matrix_with_shp.csv")
getwd()
rm(list = ls())
res = read.csv("distance_matrix_with_shp.csv")
department = read.csv("점포이름_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
my_mat = NULL
for (dept in 1:length(data)){
dat = data[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat), 20))
}
source('~/GitRepo/Multicampus_semi/address/nearest_distric_finder_final_by_JH.R', echo=TRUE)
my_mat = NULL
data
length(res)
res = read.csv("distance_matrix_with_shp.csv")
length(res)
nrow(res)
header
my_mat = NULL
for (dept in 1:nrow(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat), 5))
}
header
idx
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
my_mat
header[idx]
head(header[idx]
)
head(sort(dat))
my_mat = NULL
for (dept in 1:nrow(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
res
my_mat = NULL
for (dept in 1:length(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
colnames(my_mat) = rep(as.character(department$name), each = 2)
View(my_mat)
my_mat = NULL
for (dept in 2:length(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
colnames(my_mat) = rep(as.character(department$name), each = 2)
View(my_mat)
department
nrow(department)
header_data
depart = 1
my_mat[, (depart * 2 - 1)]
target = header_data[header_data[,2] %in% my_mat[, (depart * 2 - 1)], 2]
target_coord = subset(converted, TOT_REG_CD %in% target)
header_data = read.csv("집계코드_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
options("scipen" = 100)
header = header_data[,2]
head(header_data)
department = read.csv("점포이름_위도_경도_주소.csv", fileEncoding = "CP949", encoding = "euc-kr")
head(department)
library(rgdal)
library(ggplot2)
my_spdf <- readOGR(
dsn= paste0("../map/") ,
layer="seoul"
)
# 한국 중부 좌표계
from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m")
# 세계 표준 좌표계
to_crs = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
proj4string(my_spdf) = from_crs
converted = spTransform(my_spdf, to_crs)
target_df = broom::tidy(target_coord)
target_coord = subset(converted, TOT_REG_CD %in% target)
target_df = broom::tidy(target_coord)
cname = aggregate(cbind(long, lat) ~ id, data = target_df, FUN = mean)
label_data = cbind(cname, target_coord@data)
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
converted
target
target_df
cname
label_data
ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white")
department
department[depart,]
ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") + geom_point(data = department[depart, ], aes(lon, lat))
department[depart,]
dept = 2
dat = res[,dept]
View(dat)
idx = order(dat)
temp = c(dat, idx)
View(temp)
temp = cbind(dat, idx)
View(temp)
View(temp[idx])
header[idx]
temp[idx]
sort(dat)
my_mat
for (depart in 1:nrow(department)){
target = header_data[header_data[,2] %in% my_mat[, (depart * 2 - 1)], 2]
# target_coord = my_spdf[as.integer(my_spdf@data[, "TOT_REG_CD"]) == target, ]
# plot(target_coord)
target_coord = subset(converted, TOT_REG_CD %in% target)
target_df = broom::tidy(target_coord)
cname = aggregate(cbind(long, lat) ~ id, data = target_df, FUN = mean)
label_data = cbind(cname, target_coord@data)
my_plot = ggplot() +
geom_polygon(data = target_coord, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_gray(base_family='AppleMyungjo') +
geom_point(data = department[depart,], aes(lon, lat)) +
geom_text(data = label_data, aes(x = long, y = lat, label = TOT_REG_CD),
check_overlap = F, angle = 45) +
ggtitle(department$name[depart])
print(my_plot)
invisible(readline(prompt="Press [enter] to continue"))
}
# 한국 중부 좌표계
from_crs = CRS("EPSG:5181 +proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=GRS80 +units=m +no_defs")
# 한국 중부 좌표계
from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=GRS80 +units=m +no_defs")
# from_crs = CRS("+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m")
# 세계 표준 좌표계
to_crs = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
proj4string(my_spdf) = from_crs
converted = spTransform(my_spdf, to_crs)
library(broom)
shp_df = tidy(converted)
district_data = aggregate(cbind(long, lat) ~ id, data = shp_df, FUN = mean)
district_data = cbind(TOT_REG_CD = converted$TOT_REG_CD, district_data)
library(geosphere)
my_dist = function(lon1, lat1, lon2, lat2){
dist = distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)[1,1]
return(dist)
}
res = matrix(rep(0, length(district_data$TOT_REG_CD) * length(department$name)), nrow = length(department$name))
length(district_data$TOT_REG_CD) * length(department$name)
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (deprt %% 100 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 100 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 1000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 10000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 100000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 1000000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart %% 5000000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
length(depart$name)
length(department$name)
length(district_data$TOT_REG_CD) * 25
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart * addr %% 1000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
for (depart in 1:length(department$name)){
# for (depart in 1:1){
for (addr in 1:length(district_data$TOT_REG_CD)){
if (depart * addr %% 5000 == 1)
{
cat(addr * depart / length(district_data$TOT_REG_CD) * length(department$name),"%\n")
}
res[depart, addr] = my_dist(department$lon[depart], department$lat[depart], district_data$long[addr], district_data$lat[addr])
# print(my_dist(department$lon[depart], department$lat[depart], address$lon[addr], address$lat[addr]))
}
}
res = t(res)
write.csv(res, "distance_matrix_with_shp.csv")
my_mat = NULL
for (dept in 2:length(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
length(res)
View(res)
length(district_data$TOT_REG_CD)
dim(res)
length(res)
ncol(res)
my_mat = NULL
for (dept in 1:ncol(res)){
dat = res[,dept]
# dat[dat == 0] = NA
idx = order(dat)
my_mat = cbind(my_mat, head(header[idx]), head(sort(dat)))
}
colnames(my_mat) = rep(as.character(department$name), each = 2)
View(my_mat)
rm(list = ls())
>>>>>>> 04c984f6692c6eafda190f1501963ce2f94ad9da
